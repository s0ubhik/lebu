Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPORT

Grammar

Rule 0     S' -> code
Rule 1     code -> stmts
Rule 2     stmts -> stmt
Rule 3     stmts -> stmt COLON stmts
Rule 4     stmts -> stmt NEWLINE stmts
Rule 5     stmt -> expr
Rule 6     stmt -> assign
Rule 7     stmt -> empty
Rule 8     stmt -> function
Rule 9     stmt -> if
Rule 10    stmt -> while
Rule 11    stmt -> for
Rule 12    stmt -> return
Rule 13    stmt -> class
Rule 14    stmt -> comment
Rule 15    comment -> SLCOM
Rule 16    comment -> HSCOM
Rule 17    comment -> MLCOM
Rule 18    suite -> stmt
Rule 19    suite -> LCBRACK stmts RCBRACK
Rule 20    empty -> <empty>
Rule 21    expr -> call
Rule 22    expr -> const
Rule 23    const -> NUMBER
Rule 24    const -> FLOAT
Rule 25    const -> CHAR
Rule 26    const -> STRING
Rule 27    expr -> array
Rule 28    arg_list -> LPAREN RPAREN
Rule 29    arg_list -> LPAREN expr RPAREN
Rule 30    arg_list -> LPAREN lst RPAREN
Rule 31    array -> LSBRACK lst RSBRACK
Rule 32    array -> LSBRACK expr RSBRACK
Rule 33    lst -> expr COMMA
Rule 34    lst -> expr COMMA lst
Rule 35    lst -> expr COMMA expr
Rule 36    expr -> id LSBRACK expr RSBRACK
Rule 37    expr -> id
Rule 38    expr -> expr PLUS expr
Rule 39    expr -> expr MINUS expr
Rule 40    expr -> expr TIMES expr
Rule 41    expr -> expr DIVIDE expr
Rule 42    expr -> expr DEQUALS expr
Rule 43    expr -> expr NEQUALS expr
Rule 44    expr -> expr RABRACK expr
Rule 45    expr -> expr LABRACK expr
Rule 46    expr -> expr GEQUALS expr
Rule 47    expr -> expr LEQUALS expr
Rule 48    expr -> LPAREN expr RPAREN
Rule 49    method -> NAME
Rule 50    method -> method DOT NAME
Rule 51    call -> method DOT NAME arg_list
Rule 52    call -> NAME arg_list
Rule 53    assign -> id LSBRACK expr RSBRACK EQUALS assign
Rule 54    assign -> id LSBRACK expr RSBRACK EQUALS expr
Rule 55    assign -> id EQUALS assign
Rule 56    assign -> id EQUALS expr
Rule 57    id -> NAME method
Rule 58    id -> method
Rule 59    function -> FUNC id arg_list suite
Rule 60    if -> IF expr suite else
Rule 61    if -> IF expr suite
Rule 62    else -> ELSE suite
Rule 63    while -> WHILE expr suite
Rule 64    return -> RETURN expr
Rule 65    class -> CLASS NAME suite
Rule 66    for -> FOR expr IN expr DDOT expr suite

Terminals, with rules where they appear

CHAR                 : 25
CLASS                : 65
COLON                : 3
COMMA                : 33 34 35
DDOT                 : 66
DEQUALS              : 42
DIVIDE               : 41
DOT                  : 50 51
ELSE                 : 62
EQUALS               : 53 54 55 56
FLOAT                : 24
FOR                  : 66
FUNC                 : 59
GEQUALS              : 46
HSCOM                : 16
IF                   : 60 61
IMPORT               : 
IN                   : 66
LABRACK              : 45
LCBRACK              : 19
LEQUALS              : 47
LPAREN               : 28 29 30 48
LSBRACK              : 31 32 36 53 54
MINUS                : 39
MLCOM                : 17
NAME                 : 49 50 51 52 57 65
NEQUALS              : 43
NEWLINE              : 4
NUMBER               : 23
PLUS                 : 38
RABRACK              : 44
RCBRACK              : 19
RETURN               : 64
RPAREN               : 28 29 30 48
RSBRACK              : 31 32 36 53 54
SLCOM                : 15
STRING               : 26
TIMES                : 40
WHILE                : 63
error                : 

Nonterminals, with rules where they appear

arg_list             : 51 52 59
array                : 27
assign               : 6 53 55
call                 : 21
class                : 13
code                 : 0
comment              : 14
const                : 22
else                 : 60
empty                : 7
expr                 : 5 29 32 33 34 35 35 36 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 53 54 54 56 60 61 63 64 66 66 66
for                  : 11
function             : 8
id                   : 36 37 53 54 55 56 59
if                   : 9
lst                  : 30 31 34
method               : 50 51 57 58
return               : 12
stmt                 : 2 3 4 18
stmts                : 1 3 4 19
suite                : 59 60 61 62 63 65 66
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . stmts
    (2) stmts -> . stmt
    (3) stmts -> . stmt COLON stmts
    (4) stmts -> . stmt NEWLINE stmts
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    code                           shift and go to state 1
    stmts                          shift and go to state 2
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 1

    (0) S' -> code .



state 2

    (1) code -> stmts .

    $end            reduce using rule 1 (code -> stmts .)


state 3

    (2) stmts -> stmt .
    (3) stmts -> stmt . COLON stmts
    (4) stmts -> stmt . NEWLINE stmts

    $end            reduce using rule 2 (stmts -> stmt .)
    RCBRACK         reduce using rule 2 (stmts -> stmt .)
    COLON           shift and go to state 35
    NEWLINE         shift and go to state 36


state 4

    (5) stmt -> expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    COLON           reduce using rule 5 (stmt -> expr .)
    NEWLINE         reduce using rule 5 (stmt -> expr .)
    $end            reduce using rule 5 (stmt -> expr .)
    RCBRACK         reduce using rule 5 (stmt -> expr .)
    ELSE            reduce using rule 5 (stmt -> expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 5

    (6) stmt -> assign .

    COLON           reduce using rule 6 (stmt -> assign .)
    NEWLINE         reduce using rule 6 (stmt -> assign .)
    $end            reduce using rule 6 (stmt -> assign .)
    RCBRACK         reduce using rule 6 (stmt -> assign .)
    ELSE            reduce using rule 6 (stmt -> assign .)


state 6

    (7) stmt -> empty .

    COLON           reduce using rule 7 (stmt -> empty .)
    NEWLINE         reduce using rule 7 (stmt -> empty .)
    $end            reduce using rule 7 (stmt -> empty .)
    RCBRACK         reduce using rule 7 (stmt -> empty .)
    ELSE            reduce using rule 7 (stmt -> empty .)


state 7

    (8) stmt -> function .

    COLON           reduce using rule 8 (stmt -> function .)
    NEWLINE         reduce using rule 8 (stmt -> function .)
    $end            reduce using rule 8 (stmt -> function .)
    RCBRACK         reduce using rule 8 (stmt -> function .)
    ELSE            reduce using rule 8 (stmt -> function .)


state 8

    (9) stmt -> if .

    COLON           reduce using rule 9 (stmt -> if .)
    NEWLINE         reduce using rule 9 (stmt -> if .)
    $end            reduce using rule 9 (stmt -> if .)
    RCBRACK         reduce using rule 9 (stmt -> if .)
    ELSE            reduce using rule 9 (stmt -> if .)


state 9

    (10) stmt -> while .

    COLON           reduce using rule 10 (stmt -> while .)
    NEWLINE         reduce using rule 10 (stmt -> while .)
    $end            reduce using rule 10 (stmt -> while .)
    RCBRACK         reduce using rule 10 (stmt -> while .)
    ELSE            reduce using rule 10 (stmt -> while .)


state 10

    (11) stmt -> for .

    COLON           reduce using rule 11 (stmt -> for .)
    NEWLINE         reduce using rule 11 (stmt -> for .)
    $end            reduce using rule 11 (stmt -> for .)
    RCBRACK         reduce using rule 11 (stmt -> for .)
    ELSE            reduce using rule 11 (stmt -> for .)


state 11

    (12) stmt -> return .

    COLON           reduce using rule 12 (stmt -> return .)
    NEWLINE         reduce using rule 12 (stmt -> return .)
    $end            reduce using rule 12 (stmt -> return .)
    RCBRACK         reduce using rule 12 (stmt -> return .)
    ELSE            reduce using rule 12 (stmt -> return .)


state 12

    (13) stmt -> class .

    COLON           reduce using rule 13 (stmt -> class .)
    NEWLINE         reduce using rule 13 (stmt -> class .)
    $end            reduce using rule 13 (stmt -> class .)
    RCBRACK         reduce using rule 13 (stmt -> class .)
    ELSE            reduce using rule 13 (stmt -> class .)


state 13

    (14) stmt -> comment .

    COLON           reduce using rule 14 (stmt -> comment .)
    NEWLINE         reduce using rule 14 (stmt -> comment .)
    $end            reduce using rule 14 (stmt -> comment .)
    RCBRACK         reduce using rule 14 (stmt -> comment .)
    ELSE            reduce using rule 14 (stmt -> comment .)


state 14

    (21) expr -> call .

    PLUS            reduce using rule 21 (expr -> call .)
    MINUS           reduce using rule 21 (expr -> call .)
    TIMES           reduce using rule 21 (expr -> call .)
    DIVIDE          reduce using rule 21 (expr -> call .)
    DEQUALS         reduce using rule 21 (expr -> call .)
    NEQUALS         reduce using rule 21 (expr -> call .)
    RABRACK         reduce using rule 21 (expr -> call .)
    LABRACK         reduce using rule 21 (expr -> call .)
    GEQUALS         reduce using rule 21 (expr -> call .)
    LEQUALS         reduce using rule 21 (expr -> call .)
    COLON           reduce using rule 21 (expr -> call .)
    NEWLINE         reduce using rule 21 (expr -> call .)
    $end            reduce using rule 21 (expr -> call .)
    RSBRACK         reduce using rule 21 (expr -> call .)
    COMMA           reduce using rule 21 (expr -> call .)
    RPAREN          reduce using rule 21 (expr -> call .)
    LCBRACK         reduce using rule 21 (expr -> call .)
    LPAREN          reduce using rule 21 (expr -> call .)
    FUNC            reduce using rule 21 (expr -> call .)
    IF              reduce using rule 21 (expr -> call .)
    WHILE           reduce using rule 21 (expr -> call .)
    FOR             reduce using rule 21 (expr -> call .)
    RETURN          reduce using rule 21 (expr -> call .)
    CLASS           reduce using rule 21 (expr -> call .)
    SLCOM           reduce using rule 21 (expr -> call .)
    HSCOM           reduce using rule 21 (expr -> call .)
    MLCOM           reduce using rule 21 (expr -> call .)
    NAME            reduce using rule 21 (expr -> call .)
    NUMBER          reduce using rule 21 (expr -> call .)
    FLOAT           reduce using rule 21 (expr -> call .)
    CHAR            reduce using rule 21 (expr -> call .)
    STRING          reduce using rule 21 (expr -> call .)
    LSBRACK         reduce using rule 21 (expr -> call .)
    ELSE            reduce using rule 21 (expr -> call .)
    RCBRACK         reduce using rule 21 (expr -> call .)
    IN              reduce using rule 21 (expr -> call .)
    DDOT            reduce using rule 21 (expr -> call .)


state 15

    (22) expr -> const .

    PLUS            reduce using rule 22 (expr -> const .)
    MINUS           reduce using rule 22 (expr -> const .)
    TIMES           reduce using rule 22 (expr -> const .)
    DIVIDE          reduce using rule 22 (expr -> const .)
    DEQUALS         reduce using rule 22 (expr -> const .)
    NEQUALS         reduce using rule 22 (expr -> const .)
    RABRACK         reduce using rule 22 (expr -> const .)
    LABRACK         reduce using rule 22 (expr -> const .)
    GEQUALS         reduce using rule 22 (expr -> const .)
    LEQUALS         reduce using rule 22 (expr -> const .)
    COLON           reduce using rule 22 (expr -> const .)
    NEWLINE         reduce using rule 22 (expr -> const .)
    $end            reduce using rule 22 (expr -> const .)
    RSBRACK         reduce using rule 22 (expr -> const .)
    COMMA           reduce using rule 22 (expr -> const .)
    RPAREN          reduce using rule 22 (expr -> const .)
    LCBRACK         reduce using rule 22 (expr -> const .)
    LPAREN          reduce using rule 22 (expr -> const .)
    FUNC            reduce using rule 22 (expr -> const .)
    IF              reduce using rule 22 (expr -> const .)
    WHILE           reduce using rule 22 (expr -> const .)
    FOR             reduce using rule 22 (expr -> const .)
    RETURN          reduce using rule 22 (expr -> const .)
    CLASS           reduce using rule 22 (expr -> const .)
    SLCOM           reduce using rule 22 (expr -> const .)
    HSCOM           reduce using rule 22 (expr -> const .)
    MLCOM           reduce using rule 22 (expr -> const .)
    NAME            reduce using rule 22 (expr -> const .)
    NUMBER          reduce using rule 22 (expr -> const .)
    FLOAT           reduce using rule 22 (expr -> const .)
    CHAR            reduce using rule 22 (expr -> const .)
    STRING          reduce using rule 22 (expr -> const .)
    LSBRACK         reduce using rule 22 (expr -> const .)
    ELSE            reduce using rule 22 (expr -> const .)
    RCBRACK         reduce using rule 22 (expr -> const .)
    IN              reduce using rule 22 (expr -> const .)
    DDOT            reduce using rule 22 (expr -> const .)


state 16

    (27) expr -> array .

    PLUS            reduce using rule 27 (expr -> array .)
    MINUS           reduce using rule 27 (expr -> array .)
    TIMES           reduce using rule 27 (expr -> array .)
    DIVIDE          reduce using rule 27 (expr -> array .)
    DEQUALS         reduce using rule 27 (expr -> array .)
    NEQUALS         reduce using rule 27 (expr -> array .)
    RABRACK         reduce using rule 27 (expr -> array .)
    LABRACK         reduce using rule 27 (expr -> array .)
    GEQUALS         reduce using rule 27 (expr -> array .)
    LEQUALS         reduce using rule 27 (expr -> array .)
    COLON           reduce using rule 27 (expr -> array .)
    NEWLINE         reduce using rule 27 (expr -> array .)
    $end            reduce using rule 27 (expr -> array .)
    RSBRACK         reduce using rule 27 (expr -> array .)
    COMMA           reduce using rule 27 (expr -> array .)
    RPAREN          reduce using rule 27 (expr -> array .)
    LCBRACK         reduce using rule 27 (expr -> array .)
    LPAREN          reduce using rule 27 (expr -> array .)
    FUNC            reduce using rule 27 (expr -> array .)
    IF              reduce using rule 27 (expr -> array .)
    WHILE           reduce using rule 27 (expr -> array .)
    FOR             reduce using rule 27 (expr -> array .)
    RETURN          reduce using rule 27 (expr -> array .)
    CLASS           reduce using rule 27 (expr -> array .)
    SLCOM           reduce using rule 27 (expr -> array .)
    HSCOM           reduce using rule 27 (expr -> array .)
    MLCOM           reduce using rule 27 (expr -> array .)
    NAME            reduce using rule 27 (expr -> array .)
    NUMBER          reduce using rule 27 (expr -> array .)
    FLOAT           reduce using rule 27 (expr -> array .)
    CHAR            reduce using rule 27 (expr -> array .)
    STRING          reduce using rule 27 (expr -> array .)
    LSBRACK         reduce using rule 27 (expr -> array .)
    ELSE            reduce using rule 27 (expr -> array .)
    RCBRACK         reduce using rule 27 (expr -> array .)
    IN              reduce using rule 27 (expr -> array .)
    DDOT            reduce using rule 27 (expr -> array .)


state 17

    (36) expr -> id . LSBRACK expr RSBRACK
    (37) expr -> id .
    (53) assign -> id . LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> id . LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> id . EQUALS assign
    (56) assign -> id . EQUALS expr

    LSBRACK         shift and go to state 47
    PLUS            reduce using rule 37 (expr -> id .)
    MINUS           reduce using rule 37 (expr -> id .)
    TIMES           reduce using rule 37 (expr -> id .)
    DIVIDE          reduce using rule 37 (expr -> id .)
    DEQUALS         reduce using rule 37 (expr -> id .)
    NEQUALS         reduce using rule 37 (expr -> id .)
    RABRACK         reduce using rule 37 (expr -> id .)
    LABRACK         reduce using rule 37 (expr -> id .)
    GEQUALS         reduce using rule 37 (expr -> id .)
    LEQUALS         reduce using rule 37 (expr -> id .)
    COLON           reduce using rule 37 (expr -> id .)
    NEWLINE         reduce using rule 37 (expr -> id .)
    $end            reduce using rule 37 (expr -> id .)
    RCBRACK         reduce using rule 37 (expr -> id .)
    ELSE            reduce using rule 37 (expr -> id .)
    EQUALS          shift and go to state 48


state 18

    (31) array -> LSBRACK . lst RSBRACK
    (32) array -> LSBRACK . expr RSBRACK
    (33) lst -> . expr COMMA
    (34) lst -> . expr COMMA lst
    (35) lst -> . expr COMMA expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    lst                            shift and go to state 49
    expr                           shift and go to state 50
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 19

    (48) expr -> LPAREN . expr RPAREN
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 52
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 20

    (59) function -> FUNC . id arg_list suite
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    NAME            shift and go to state 54

    id                             shift and go to state 53
    method                         shift and go to state 55

state 21

    (60) if -> IF . expr suite else
    (61) if -> IF . expr suite
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 56
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 22

    (63) while -> WHILE . expr suite
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 57
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 23

    (66) for -> FOR . expr IN expr DDOT expr suite
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 58
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 24

    (64) return -> RETURN . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 59
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 25

    (65) class -> CLASS . NAME suite

    NAME            shift and go to state 60


state 26

    (52) call -> NAME . arg_list
    (57) id -> NAME . method
    (49) method -> NAME .
    (28) arg_list -> . LPAREN RPAREN
    (29) arg_list -> . LPAREN expr RPAREN
    (30) arg_list -> . LPAREN lst RPAREN
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    DOT             reduce using rule 49 (method -> NAME .)
    LSBRACK         reduce using rule 49 (method -> NAME .)
    EQUALS          reduce using rule 49 (method -> NAME .)
    PLUS            reduce using rule 49 (method -> NAME .)
    MINUS           reduce using rule 49 (method -> NAME .)
    TIMES           reduce using rule 49 (method -> NAME .)
    DIVIDE          reduce using rule 49 (method -> NAME .)
    DEQUALS         reduce using rule 49 (method -> NAME .)
    NEQUALS         reduce using rule 49 (method -> NAME .)
    RABRACK         reduce using rule 49 (method -> NAME .)
    LABRACK         reduce using rule 49 (method -> NAME .)
    GEQUALS         reduce using rule 49 (method -> NAME .)
    LEQUALS         reduce using rule 49 (method -> NAME .)
    COLON           reduce using rule 49 (method -> NAME .)
    NEWLINE         reduce using rule 49 (method -> NAME .)
    $end            reduce using rule 49 (method -> NAME .)
    RSBRACK         reduce using rule 49 (method -> NAME .)
    COMMA           reduce using rule 49 (method -> NAME .)
    RPAREN          reduce using rule 49 (method -> NAME .)
    LCBRACK         reduce using rule 49 (method -> NAME .)
    FUNC            reduce using rule 49 (method -> NAME .)
    IF              reduce using rule 49 (method -> NAME .)
    WHILE           reduce using rule 49 (method -> NAME .)
    FOR             reduce using rule 49 (method -> NAME .)
    RETURN          reduce using rule 49 (method -> NAME .)
    CLASS           reduce using rule 49 (method -> NAME .)
    SLCOM           reduce using rule 49 (method -> NAME .)
    HSCOM           reduce using rule 49 (method -> NAME .)
    MLCOM           reduce using rule 49 (method -> NAME .)
    NUMBER          reduce using rule 49 (method -> NAME .)
    FLOAT           reduce using rule 49 (method -> NAME .)
    CHAR            reduce using rule 49 (method -> NAME .)
    STRING          reduce using rule 49 (method -> NAME .)
    ELSE            reduce using rule 49 (method -> NAME .)
    RCBRACK         reduce using rule 49 (method -> NAME .)
    IN              reduce using rule 49 (method -> NAME .)
    DDOT            reduce using rule 49 (method -> NAME .)
    LPAREN          shift and go to state 64
    NAME            shift and go to state 61

  ! LPAREN          [ reduce using rule 49 (method -> NAME .) ]
  ! NAME            [ reduce using rule 49 (method -> NAME .) ]

    arg_list                       shift and go to state 62
    method                         shift and go to state 63

state 27

    (15) comment -> SLCOM .

    COLON           reduce using rule 15 (comment -> SLCOM .)
    NEWLINE         reduce using rule 15 (comment -> SLCOM .)
    $end            reduce using rule 15 (comment -> SLCOM .)
    RCBRACK         reduce using rule 15 (comment -> SLCOM .)
    ELSE            reduce using rule 15 (comment -> SLCOM .)


state 28

    (16) comment -> HSCOM .

    COLON           reduce using rule 16 (comment -> HSCOM .)
    NEWLINE         reduce using rule 16 (comment -> HSCOM .)
    $end            reduce using rule 16 (comment -> HSCOM .)
    RCBRACK         reduce using rule 16 (comment -> HSCOM .)
    ELSE            reduce using rule 16 (comment -> HSCOM .)


state 29

    (17) comment -> MLCOM .

    COLON           reduce using rule 17 (comment -> MLCOM .)
    NEWLINE         reduce using rule 17 (comment -> MLCOM .)
    $end            reduce using rule 17 (comment -> MLCOM .)
    RCBRACK         reduce using rule 17 (comment -> MLCOM .)
    ELSE            reduce using rule 17 (comment -> MLCOM .)


state 30

    (51) call -> method . DOT NAME arg_list
    (58) id -> method .
    (50) method -> method . DOT NAME

    DOT             shift and go to state 65
    LSBRACK         reduce using rule 58 (id -> method .)
    EQUALS          reduce using rule 58 (id -> method .)
    PLUS            reduce using rule 58 (id -> method .)
    MINUS           reduce using rule 58 (id -> method .)
    TIMES           reduce using rule 58 (id -> method .)
    DIVIDE          reduce using rule 58 (id -> method .)
    DEQUALS         reduce using rule 58 (id -> method .)
    NEQUALS         reduce using rule 58 (id -> method .)
    RABRACK         reduce using rule 58 (id -> method .)
    LABRACK         reduce using rule 58 (id -> method .)
    GEQUALS         reduce using rule 58 (id -> method .)
    LEQUALS         reduce using rule 58 (id -> method .)
    COLON           reduce using rule 58 (id -> method .)
    NEWLINE         reduce using rule 58 (id -> method .)
    $end            reduce using rule 58 (id -> method .)
    RSBRACK         reduce using rule 58 (id -> method .)
    COMMA           reduce using rule 58 (id -> method .)
    RPAREN          reduce using rule 58 (id -> method .)
    LCBRACK         reduce using rule 58 (id -> method .)
    LPAREN          reduce using rule 58 (id -> method .)
    FUNC            reduce using rule 58 (id -> method .)
    IF              reduce using rule 58 (id -> method .)
    WHILE           reduce using rule 58 (id -> method .)
    FOR             reduce using rule 58 (id -> method .)
    RETURN          reduce using rule 58 (id -> method .)
    CLASS           reduce using rule 58 (id -> method .)
    SLCOM           reduce using rule 58 (id -> method .)
    HSCOM           reduce using rule 58 (id -> method .)
    MLCOM           reduce using rule 58 (id -> method .)
    NAME            reduce using rule 58 (id -> method .)
    NUMBER          reduce using rule 58 (id -> method .)
    FLOAT           reduce using rule 58 (id -> method .)
    CHAR            reduce using rule 58 (id -> method .)
    STRING          reduce using rule 58 (id -> method .)
    ELSE            reduce using rule 58 (id -> method .)
    RCBRACK         reduce using rule 58 (id -> method .)
    IN              reduce using rule 58 (id -> method .)
    DDOT            reduce using rule 58 (id -> method .)


state 31

    (23) const -> NUMBER .

    PLUS            reduce using rule 23 (const -> NUMBER .)
    MINUS           reduce using rule 23 (const -> NUMBER .)
    TIMES           reduce using rule 23 (const -> NUMBER .)
    DIVIDE          reduce using rule 23 (const -> NUMBER .)
    DEQUALS         reduce using rule 23 (const -> NUMBER .)
    NEQUALS         reduce using rule 23 (const -> NUMBER .)
    RABRACK         reduce using rule 23 (const -> NUMBER .)
    LABRACK         reduce using rule 23 (const -> NUMBER .)
    GEQUALS         reduce using rule 23 (const -> NUMBER .)
    LEQUALS         reduce using rule 23 (const -> NUMBER .)
    COLON           reduce using rule 23 (const -> NUMBER .)
    NEWLINE         reduce using rule 23 (const -> NUMBER .)
    $end            reduce using rule 23 (const -> NUMBER .)
    RSBRACK         reduce using rule 23 (const -> NUMBER .)
    COMMA           reduce using rule 23 (const -> NUMBER .)
    RPAREN          reduce using rule 23 (const -> NUMBER .)
    LCBRACK         reduce using rule 23 (const -> NUMBER .)
    LPAREN          reduce using rule 23 (const -> NUMBER .)
    FUNC            reduce using rule 23 (const -> NUMBER .)
    IF              reduce using rule 23 (const -> NUMBER .)
    WHILE           reduce using rule 23 (const -> NUMBER .)
    FOR             reduce using rule 23 (const -> NUMBER .)
    RETURN          reduce using rule 23 (const -> NUMBER .)
    CLASS           reduce using rule 23 (const -> NUMBER .)
    SLCOM           reduce using rule 23 (const -> NUMBER .)
    HSCOM           reduce using rule 23 (const -> NUMBER .)
    MLCOM           reduce using rule 23 (const -> NUMBER .)
    NAME            reduce using rule 23 (const -> NUMBER .)
    NUMBER          reduce using rule 23 (const -> NUMBER .)
    FLOAT           reduce using rule 23 (const -> NUMBER .)
    CHAR            reduce using rule 23 (const -> NUMBER .)
    STRING          reduce using rule 23 (const -> NUMBER .)
    LSBRACK         reduce using rule 23 (const -> NUMBER .)
    ELSE            reduce using rule 23 (const -> NUMBER .)
    RCBRACK         reduce using rule 23 (const -> NUMBER .)
    IN              reduce using rule 23 (const -> NUMBER .)
    DDOT            reduce using rule 23 (const -> NUMBER .)


state 32

    (24) const -> FLOAT .

    PLUS            reduce using rule 24 (const -> FLOAT .)
    MINUS           reduce using rule 24 (const -> FLOAT .)
    TIMES           reduce using rule 24 (const -> FLOAT .)
    DIVIDE          reduce using rule 24 (const -> FLOAT .)
    DEQUALS         reduce using rule 24 (const -> FLOAT .)
    NEQUALS         reduce using rule 24 (const -> FLOAT .)
    RABRACK         reduce using rule 24 (const -> FLOAT .)
    LABRACK         reduce using rule 24 (const -> FLOAT .)
    GEQUALS         reduce using rule 24 (const -> FLOAT .)
    LEQUALS         reduce using rule 24 (const -> FLOAT .)
    COLON           reduce using rule 24 (const -> FLOAT .)
    NEWLINE         reduce using rule 24 (const -> FLOAT .)
    $end            reduce using rule 24 (const -> FLOAT .)
    RSBRACK         reduce using rule 24 (const -> FLOAT .)
    COMMA           reduce using rule 24 (const -> FLOAT .)
    RPAREN          reduce using rule 24 (const -> FLOAT .)
    LCBRACK         reduce using rule 24 (const -> FLOAT .)
    LPAREN          reduce using rule 24 (const -> FLOAT .)
    FUNC            reduce using rule 24 (const -> FLOAT .)
    IF              reduce using rule 24 (const -> FLOAT .)
    WHILE           reduce using rule 24 (const -> FLOAT .)
    FOR             reduce using rule 24 (const -> FLOAT .)
    RETURN          reduce using rule 24 (const -> FLOAT .)
    CLASS           reduce using rule 24 (const -> FLOAT .)
    SLCOM           reduce using rule 24 (const -> FLOAT .)
    HSCOM           reduce using rule 24 (const -> FLOAT .)
    MLCOM           reduce using rule 24 (const -> FLOAT .)
    NAME            reduce using rule 24 (const -> FLOAT .)
    NUMBER          reduce using rule 24 (const -> FLOAT .)
    FLOAT           reduce using rule 24 (const -> FLOAT .)
    CHAR            reduce using rule 24 (const -> FLOAT .)
    STRING          reduce using rule 24 (const -> FLOAT .)
    LSBRACK         reduce using rule 24 (const -> FLOAT .)
    ELSE            reduce using rule 24 (const -> FLOAT .)
    RCBRACK         reduce using rule 24 (const -> FLOAT .)
    IN              reduce using rule 24 (const -> FLOAT .)
    DDOT            reduce using rule 24 (const -> FLOAT .)


state 33

    (25) const -> CHAR .

    PLUS            reduce using rule 25 (const -> CHAR .)
    MINUS           reduce using rule 25 (const -> CHAR .)
    TIMES           reduce using rule 25 (const -> CHAR .)
    DIVIDE          reduce using rule 25 (const -> CHAR .)
    DEQUALS         reduce using rule 25 (const -> CHAR .)
    NEQUALS         reduce using rule 25 (const -> CHAR .)
    RABRACK         reduce using rule 25 (const -> CHAR .)
    LABRACK         reduce using rule 25 (const -> CHAR .)
    GEQUALS         reduce using rule 25 (const -> CHAR .)
    LEQUALS         reduce using rule 25 (const -> CHAR .)
    COLON           reduce using rule 25 (const -> CHAR .)
    NEWLINE         reduce using rule 25 (const -> CHAR .)
    $end            reduce using rule 25 (const -> CHAR .)
    RSBRACK         reduce using rule 25 (const -> CHAR .)
    COMMA           reduce using rule 25 (const -> CHAR .)
    RPAREN          reduce using rule 25 (const -> CHAR .)
    LCBRACK         reduce using rule 25 (const -> CHAR .)
    LPAREN          reduce using rule 25 (const -> CHAR .)
    FUNC            reduce using rule 25 (const -> CHAR .)
    IF              reduce using rule 25 (const -> CHAR .)
    WHILE           reduce using rule 25 (const -> CHAR .)
    FOR             reduce using rule 25 (const -> CHAR .)
    RETURN          reduce using rule 25 (const -> CHAR .)
    CLASS           reduce using rule 25 (const -> CHAR .)
    SLCOM           reduce using rule 25 (const -> CHAR .)
    HSCOM           reduce using rule 25 (const -> CHAR .)
    MLCOM           reduce using rule 25 (const -> CHAR .)
    NAME            reduce using rule 25 (const -> CHAR .)
    NUMBER          reduce using rule 25 (const -> CHAR .)
    FLOAT           reduce using rule 25 (const -> CHAR .)
    CHAR            reduce using rule 25 (const -> CHAR .)
    STRING          reduce using rule 25 (const -> CHAR .)
    LSBRACK         reduce using rule 25 (const -> CHAR .)
    ELSE            reduce using rule 25 (const -> CHAR .)
    RCBRACK         reduce using rule 25 (const -> CHAR .)
    IN              reduce using rule 25 (const -> CHAR .)
    DDOT            reduce using rule 25 (const -> CHAR .)


state 34

    (26) const -> STRING .

    PLUS            reduce using rule 26 (const -> STRING .)
    MINUS           reduce using rule 26 (const -> STRING .)
    TIMES           reduce using rule 26 (const -> STRING .)
    DIVIDE          reduce using rule 26 (const -> STRING .)
    DEQUALS         reduce using rule 26 (const -> STRING .)
    NEQUALS         reduce using rule 26 (const -> STRING .)
    RABRACK         reduce using rule 26 (const -> STRING .)
    LABRACK         reduce using rule 26 (const -> STRING .)
    GEQUALS         reduce using rule 26 (const -> STRING .)
    LEQUALS         reduce using rule 26 (const -> STRING .)
    COLON           reduce using rule 26 (const -> STRING .)
    NEWLINE         reduce using rule 26 (const -> STRING .)
    $end            reduce using rule 26 (const -> STRING .)
    RSBRACK         reduce using rule 26 (const -> STRING .)
    COMMA           reduce using rule 26 (const -> STRING .)
    RPAREN          reduce using rule 26 (const -> STRING .)
    LCBRACK         reduce using rule 26 (const -> STRING .)
    LPAREN          reduce using rule 26 (const -> STRING .)
    FUNC            reduce using rule 26 (const -> STRING .)
    IF              reduce using rule 26 (const -> STRING .)
    WHILE           reduce using rule 26 (const -> STRING .)
    FOR             reduce using rule 26 (const -> STRING .)
    RETURN          reduce using rule 26 (const -> STRING .)
    CLASS           reduce using rule 26 (const -> STRING .)
    SLCOM           reduce using rule 26 (const -> STRING .)
    HSCOM           reduce using rule 26 (const -> STRING .)
    MLCOM           reduce using rule 26 (const -> STRING .)
    NAME            reduce using rule 26 (const -> STRING .)
    NUMBER          reduce using rule 26 (const -> STRING .)
    FLOAT           reduce using rule 26 (const -> STRING .)
    CHAR            reduce using rule 26 (const -> STRING .)
    STRING          reduce using rule 26 (const -> STRING .)
    LSBRACK         reduce using rule 26 (const -> STRING .)
    ELSE            reduce using rule 26 (const -> STRING .)
    RCBRACK         reduce using rule 26 (const -> STRING .)
    IN              reduce using rule 26 (const -> STRING .)
    DDOT            reduce using rule 26 (const -> STRING .)


state 35

    (3) stmts -> stmt COLON . stmts
    (2) stmts -> . stmt
    (3) stmts -> . stmt COLON stmts
    (4) stmts -> . stmt NEWLINE stmts
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    stmt                           shift and go to state 3
    stmts                          shift and go to state 66
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 36

    (4) stmts -> stmt NEWLINE . stmts
    (2) stmts -> . stmt
    (3) stmts -> . stmt COLON stmts
    (4) stmts -> . stmt NEWLINE stmts
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    stmt                           shift and go to state 3
    stmts                          shift and go to state 67
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 37

    (38) expr -> expr PLUS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 68
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 38

    (39) expr -> expr MINUS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 69
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 39

    (40) expr -> expr TIMES . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 70
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 40

    (41) expr -> expr DIVIDE . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 71
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 41

    (42) expr -> expr DEQUALS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 72
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 42

    (43) expr -> expr NEQUALS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 73
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 43

    (44) expr -> expr RABRACK . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 74
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 44

    (45) expr -> expr LABRACK . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 75
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 45

    (46) expr -> expr GEQUALS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 76
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 46

    (47) expr -> expr LEQUALS . expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 77
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 47

    (36) expr -> id LSBRACK . expr RSBRACK
    (53) assign -> id LSBRACK . expr RSBRACK EQUALS assign
    (54) assign -> id LSBRACK . expr RSBRACK EQUALS expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 51
    expr                           shift and go to state 78
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 30

state 48

    (55) assign -> id EQUALS . assign
    (56) assign -> id EQUALS . expr
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (57) id -> . NAME method
    (58) id -> . method
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 82
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 79
    assign                         shift and go to state 80
    expr                           shift and go to state 81
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 83

state 49

    (31) array -> LSBRACK lst . RSBRACK

    RSBRACK         shift and go to state 84


state 50

    (32) array -> LSBRACK expr . RSBRACK
    (33) lst -> expr . COMMA
    (34) lst -> expr . COMMA lst
    (35) lst -> expr . COMMA expr
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RSBRACK         shift and go to state 85
    COMMA           shift and go to state 86
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 51

    (36) expr -> id . LSBRACK expr RSBRACK
    (37) expr -> id .

  ! shift/reduce conflict for LSBRACK resolved as shift
    LSBRACK         shift and go to state 87
    RSBRACK         reduce using rule 37 (expr -> id .)
    COMMA           reduce using rule 37 (expr -> id .)
    PLUS            reduce using rule 37 (expr -> id .)
    MINUS           reduce using rule 37 (expr -> id .)
    TIMES           reduce using rule 37 (expr -> id .)
    DIVIDE          reduce using rule 37 (expr -> id .)
    DEQUALS         reduce using rule 37 (expr -> id .)
    NEQUALS         reduce using rule 37 (expr -> id .)
    RABRACK         reduce using rule 37 (expr -> id .)
    LABRACK         reduce using rule 37 (expr -> id .)
    GEQUALS         reduce using rule 37 (expr -> id .)
    LEQUALS         reduce using rule 37 (expr -> id .)
    RPAREN          reduce using rule 37 (expr -> id .)
    LCBRACK         reduce using rule 37 (expr -> id .)
    LPAREN          reduce using rule 37 (expr -> id .)
    FUNC            reduce using rule 37 (expr -> id .)
    IF              reduce using rule 37 (expr -> id .)
    WHILE           reduce using rule 37 (expr -> id .)
    FOR             reduce using rule 37 (expr -> id .)
    RETURN          reduce using rule 37 (expr -> id .)
    CLASS           reduce using rule 37 (expr -> id .)
    SLCOM           reduce using rule 37 (expr -> id .)
    HSCOM           reduce using rule 37 (expr -> id .)
    MLCOM           reduce using rule 37 (expr -> id .)
    NAME            reduce using rule 37 (expr -> id .)
    NUMBER          reduce using rule 37 (expr -> id .)
    FLOAT           reduce using rule 37 (expr -> id .)
    CHAR            reduce using rule 37 (expr -> id .)
    STRING          reduce using rule 37 (expr -> id .)
    ELSE            reduce using rule 37 (expr -> id .)
    COLON           reduce using rule 37 (expr -> id .)
    NEWLINE         reduce using rule 37 (expr -> id .)
    $end            reduce using rule 37 (expr -> id .)
    RCBRACK         reduce using rule 37 (expr -> id .)
    IN              reduce using rule 37 (expr -> id .)
    DDOT            reduce using rule 37 (expr -> id .)

  ! LSBRACK         [ reduce using rule 37 (expr -> id .) ]


state 52

    (48) expr -> LPAREN expr . RPAREN
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 53

    (59) function -> FUNC id . arg_list suite
    (28) arg_list -> . LPAREN RPAREN
    (29) arg_list -> . LPAREN expr RPAREN
    (30) arg_list -> . LPAREN lst RPAREN

    LPAREN          shift and go to state 64

    arg_list                       shift and go to state 89

state 54

    (57) id -> NAME . method
    (49) method -> NAME .
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    DOT             reduce using rule 49 (method -> NAME .)
    LPAREN          reduce using rule 49 (method -> NAME .)
    NAME            shift and go to state 61

    method                         shift and go to state 63

state 55

    (58) id -> method .
    (50) method -> method . DOT NAME

    LPAREN          reduce using rule 58 (id -> method .)
    DOT             shift and go to state 90


state 56

    (60) if -> IF expr . suite else
    (61) if -> IF expr . suite
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46
    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 4
    suite                          shift and go to state 91
    stmt                           shift and go to state 92
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 57

    (63) while -> WHILE expr . suite
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46
    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 4
    suite                          shift and go to state 94
    stmt                           shift and go to state 92
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 58

    (66) for -> FOR expr . IN expr DDOT expr suite
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    IN              shift and go to state 95
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 59

    (64) return -> RETURN expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    COLON           reduce using rule 64 (return -> RETURN expr .)
    NEWLINE         reduce using rule 64 (return -> RETURN expr .)
    $end            reduce using rule 64 (return -> RETURN expr .)
    RCBRACK         reduce using rule 64 (return -> RETURN expr .)
    ELSE            reduce using rule 64 (return -> RETURN expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 60

    (65) class -> CLASS NAME . suite
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    suite                          shift and go to state 96
    stmt                           shift and go to state 92
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 61

    (49) method -> NAME .

    DOT             reduce using rule 49 (method -> NAME .)
    LSBRACK         reduce using rule 49 (method -> NAME .)
    EQUALS          reduce using rule 49 (method -> NAME .)
    PLUS            reduce using rule 49 (method -> NAME .)
    MINUS           reduce using rule 49 (method -> NAME .)
    TIMES           reduce using rule 49 (method -> NAME .)
    DIVIDE          reduce using rule 49 (method -> NAME .)
    DEQUALS         reduce using rule 49 (method -> NAME .)
    NEQUALS         reduce using rule 49 (method -> NAME .)
    RABRACK         reduce using rule 49 (method -> NAME .)
    LABRACK         reduce using rule 49 (method -> NAME .)
    GEQUALS         reduce using rule 49 (method -> NAME .)
    LEQUALS         reduce using rule 49 (method -> NAME .)
    COLON           reduce using rule 49 (method -> NAME .)
    NEWLINE         reduce using rule 49 (method -> NAME .)
    $end            reduce using rule 49 (method -> NAME .)
    RSBRACK         reduce using rule 49 (method -> NAME .)
    COMMA           reduce using rule 49 (method -> NAME .)
    RPAREN          reduce using rule 49 (method -> NAME .)
    LCBRACK         reduce using rule 49 (method -> NAME .)
    LPAREN          reduce using rule 49 (method -> NAME .)
    FUNC            reduce using rule 49 (method -> NAME .)
    IF              reduce using rule 49 (method -> NAME .)
    WHILE           reduce using rule 49 (method -> NAME .)
    FOR             reduce using rule 49 (method -> NAME .)
    RETURN          reduce using rule 49 (method -> NAME .)
    CLASS           reduce using rule 49 (method -> NAME .)
    SLCOM           reduce using rule 49 (method -> NAME .)
    HSCOM           reduce using rule 49 (method -> NAME .)
    MLCOM           reduce using rule 49 (method -> NAME .)
    NAME            reduce using rule 49 (method -> NAME .)
    NUMBER          reduce using rule 49 (method -> NAME .)
    FLOAT           reduce using rule 49 (method -> NAME .)
    CHAR            reduce using rule 49 (method -> NAME .)
    STRING          reduce using rule 49 (method -> NAME .)
    ELSE            reduce using rule 49 (method -> NAME .)
    RCBRACK         reduce using rule 49 (method -> NAME .)
    IN              reduce using rule 49 (method -> NAME .)
    DDOT            reduce using rule 49 (method -> NAME .)


state 62

    (52) call -> NAME arg_list .

    PLUS            reduce using rule 52 (call -> NAME arg_list .)
    MINUS           reduce using rule 52 (call -> NAME arg_list .)
    TIMES           reduce using rule 52 (call -> NAME arg_list .)
    DIVIDE          reduce using rule 52 (call -> NAME arg_list .)
    DEQUALS         reduce using rule 52 (call -> NAME arg_list .)
    NEQUALS         reduce using rule 52 (call -> NAME arg_list .)
    RABRACK         reduce using rule 52 (call -> NAME arg_list .)
    LABRACK         reduce using rule 52 (call -> NAME arg_list .)
    GEQUALS         reduce using rule 52 (call -> NAME arg_list .)
    LEQUALS         reduce using rule 52 (call -> NAME arg_list .)
    COLON           reduce using rule 52 (call -> NAME arg_list .)
    NEWLINE         reduce using rule 52 (call -> NAME arg_list .)
    $end            reduce using rule 52 (call -> NAME arg_list .)
    RSBRACK         reduce using rule 52 (call -> NAME arg_list .)
    COMMA           reduce using rule 52 (call -> NAME arg_list .)
    RPAREN          reduce using rule 52 (call -> NAME arg_list .)
    LCBRACK         reduce using rule 52 (call -> NAME arg_list .)
    LPAREN          reduce using rule 52 (call -> NAME arg_list .)
    FUNC            reduce using rule 52 (call -> NAME arg_list .)
    IF              reduce using rule 52 (call -> NAME arg_list .)
    WHILE           reduce using rule 52 (call -> NAME arg_list .)
    FOR             reduce using rule 52 (call -> NAME arg_list .)
    RETURN          reduce using rule 52 (call -> NAME arg_list .)
    CLASS           reduce using rule 52 (call -> NAME arg_list .)
    SLCOM           reduce using rule 52 (call -> NAME arg_list .)
    HSCOM           reduce using rule 52 (call -> NAME arg_list .)
    MLCOM           reduce using rule 52 (call -> NAME arg_list .)
    NAME            reduce using rule 52 (call -> NAME arg_list .)
    NUMBER          reduce using rule 52 (call -> NAME arg_list .)
    FLOAT           reduce using rule 52 (call -> NAME arg_list .)
    CHAR            reduce using rule 52 (call -> NAME arg_list .)
    STRING          reduce using rule 52 (call -> NAME arg_list .)
    LSBRACK         reduce using rule 52 (call -> NAME arg_list .)
    ELSE            reduce using rule 52 (call -> NAME arg_list .)
    RCBRACK         reduce using rule 52 (call -> NAME arg_list .)
    IN              reduce using rule 52 (call -> NAME arg_list .)
    DDOT            reduce using rule 52 (call -> NAME arg_list .)


state 63

    (57) id -> NAME method .
    (50) method -> method . DOT NAME

    LSBRACK         reduce using rule 57 (id -> NAME method .)
    EQUALS          reduce using rule 57 (id -> NAME method .)
    PLUS            reduce using rule 57 (id -> NAME method .)
    MINUS           reduce using rule 57 (id -> NAME method .)
    TIMES           reduce using rule 57 (id -> NAME method .)
    DIVIDE          reduce using rule 57 (id -> NAME method .)
    DEQUALS         reduce using rule 57 (id -> NAME method .)
    NEQUALS         reduce using rule 57 (id -> NAME method .)
    RABRACK         reduce using rule 57 (id -> NAME method .)
    LABRACK         reduce using rule 57 (id -> NAME method .)
    GEQUALS         reduce using rule 57 (id -> NAME method .)
    LEQUALS         reduce using rule 57 (id -> NAME method .)
    COLON           reduce using rule 57 (id -> NAME method .)
    NEWLINE         reduce using rule 57 (id -> NAME method .)
    $end            reduce using rule 57 (id -> NAME method .)
    RSBRACK         reduce using rule 57 (id -> NAME method .)
    COMMA           reduce using rule 57 (id -> NAME method .)
    RPAREN          reduce using rule 57 (id -> NAME method .)
    LPAREN          reduce using rule 57 (id -> NAME method .)
    LCBRACK         reduce using rule 57 (id -> NAME method .)
    FUNC            reduce using rule 57 (id -> NAME method .)
    IF              reduce using rule 57 (id -> NAME method .)
    WHILE           reduce using rule 57 (id -> NAME method .)
    FOR             reduce using rule 57 (id -> NAME method .)
    RETURN          reduce using rule 57 (id -> NAME method .)
    CLASS           reduce using rule 57 (id -> NAME method .)
    SLCOM           reduce using rule 57 (id -> NAME method .)
    HSCOM           reduce using rule 57 (id -> NAME method .)
    MLCOM           reduce using rule 57 (id -> NAME method .)
    NAME            reduce using rule 57 (id -> NAME method .)
    NUMBER          reduce using rule 57 (id -> NAME method .)
    FLOAT           reduce using rule 57 (id -> NAME method .)
    CHAR            reduce using rule 57 (id -> NAME method .)
    STRING          reduce using rule 57 (id -> NAME method .)
    ELSE            reduce using rule 57 (id -> NAME method .)
    RCBRACK         reduce using rule 57 (id -> NAME method .)
    IN              reduce using rule 57 (id -> NAME method .)
    DDOT            reduce using rule 57 (id -> NAME method .)
    DOT             shift and go to state 90


state 64

    (28) arg_list -> LPAREN . RPAREN
    (29) arg_list -> LPAREN . expr RPAREN
    (30) arg_list -> LPAREN . lst RPAREN
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (33) lst -> . expr COMMA
    (34) lst -> . expr COMMA lst
    (35) lst -> . expr COMMA expr
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    RPAREN          shift and go to state 97
    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 98
    lst                            shift and go to state 99
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 65

    (51) call -> method DOT . NAME arg_list
    (50) method -> method DOT . NAME

    NAME            shift and go to state 100


state 66

    (3) stmts -> stmt COLON stmts .

    $end            reduce using rule 3 (stmts -> stmt COLON stmts .)
    RCBRACK         reduce using rule 3 (stmts -> stmt COLON stmts .)


state 67

    (4) stmts -> stmt NEWLINE stmts .

    $end            reduce using rule 4 (stmts -> stmt NEWLINE stmts .)
    RCBRACK         reduce using rule 4 (stmts -> stmt NEWLINE stmts .)


state 68

    (38) expr -> expr PLUS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 38 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 38 (expr -> expr PLUS expr .)
    COLON           reduce using rule 38 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 38 (expr -> expr PLUS expr .)
    $end            reduce using rule 38 (expr -> expr PLUS expr .)
    RSBRACK         reduce using rule 38 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 38 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 38 (expr -> expr PLUS expr .)
    LCBRACK         reduce using rule 38 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 38 (expr -> expr PLUS expr .)
    FUNC            reduce using rule 38 (expr -> expr PLUS expr .)
    IF              reduce using rule 38 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 38 (expr -> expr PLUS expr .)
    FOR             reduce using rule 38 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 38 (expr -> expr PLUS expr .)
    CLASS           reduce using rule 38 (expr -> expr PLUS expr .)
    SLCOM           reduce using rule 38 (expr -> expr PLUS expr .)
    HSCOM           reduce using rule 38 (expr -> expr PLUS expr .)
    MLCOM           reduce using rule 38 (expr -> expr PLUS expr .)
    NAME            reduce using rule 38 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 38 (expr -> expr PLUS expr .)
    FLOAT           reduce using rule 38 (expr -> expr PLUS expr .)
    CHAR            reduce using rule 38 (expr -> expr PLUS expr .)
    STRING          reduce using rule 38 (expr -> expr PLUS expr .)
    LSBRACK         reduce using rule 38 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 38 (expr -> expr PLUS expr .)
    RCBRACK         reduce using rule 38 (expr -> expr PLUS expr .)
    IN              reduce using rule 38 (expr -> expr PLUS expr .)
    DDOT            reduce using rule 38 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! TIMES           [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! DEQUALS         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! NEQUALS         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! RABRACK         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! LABRACK         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! GEQUALS         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! LEQUALS         [ reduce using rule 38 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 69

    (39) expr -> expr MINUS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 39 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 39 (expr -> expr MINUS expr .)
    COLON           reduce using rule 39 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 39 (expr -> expr MINUS expr .)
    $end            reduce using rule 39 (expr -> expr MINUS expr .)
    RSBRACK         reduce using rule 39 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 39 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 39 (expr -> expr MINUS expr .)
    LCBRACK         reduce using rule 39 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 39 (expr -> expr MINUS expr .)
    FUNC            reduce using rule 39 (expr -> expr MINUS expr .)
    IF              reduce using rule 39 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 39 (expr -> expr MINUS expr .)
    FOR             reduce using rule 39 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 39 (expr -> expr MINUS expr .)
    CLASS           reduce using rule 39 (expr -> expr MINUS expr .)
    SLCOM           reduce using rule 39 (expr -> expr MINUS expr .)
    HSCOM           reduce using rule 39 (expr -> expr MINUS expr .)
    MLCOM           reduce using rule 39 (expr -> expr MINUS expr .)
    NAME            reduce using rule 39 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 39 (expr -> expr MINUS expr .)
    FLOAT           reduce using rule 39 (expr -> expr MINUS expr .)
    CHAR            reduce using rule 39 (expr -> expr MINUS expr .)
    STRING          reduce using rule 39 (expr -> expr MINUS expr .)
    LSBRACK         reduce using rule 39 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 39 (expr -> expr MINUS expr .)
    RCBRACK         reduce using rule 39 (expr -> expr MINUS expr .)
    IN              reduce using rule 39 (expr -> expr MINUS expr .)
    DDOT            reduce using rule 39 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! TIMES           [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! DEQUALS         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! NEQUALS         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! RABRACK         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! LABRACK         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! GEQUALS         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! LEQUALS         [ reduce using rule 39 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]


state 70

    (40) expr -> expr TIMES expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 40 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 40 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 40 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 40 (expr -> expr TIMES expr .)
    COLON           reduce using rule 40 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 40 (expr -> expr TIMES expr .)
    $end            reduce using rule 40 (expr -> expr TIMES expr .)
    RSBRACK         reduce using rule 40 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 40 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 40 (expr -> expr TIMES expr .)
    LCBRACK         reduce using rule 40 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 40 (expr -> expr TIMES expr .)
    FUNC            reduce using rule 40 (expr -> expr TIMES expr .)
    IF              reduce using rule 40 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 40 (expr -> expr TIMES expr .)
    FOR             reduce using rule 40 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 40 (expr -> expr TIMES expr .)
    CLASS           reduce using rule 40 (expr -> expr TIMES expr .)
    SLCOM           reduce using rule 40 (expr -> expr TIMES expr .)
    HSCOM           reduce using rule 40 (expr -> expr TIMES expr .)
    MLCOM           reduce using rule 40 (expr -> expr TIMES expr .)
    NAME            reduce using rule 40 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 40 (expr -> expr TIMES expr .)
    FLOAT           reduce using rule 40 (expr -> expr TIMES expr .)
    CHAR            reduce using rule 40 (expr -> expr TIMES expr .)
    STRING          reduce using rule 40 (expr -> expr TIMES expr .)
    LSBRACK         reduce using rule 40 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 40 (expr -> expr TIMES expr .)
    RCBRACK         reduce using rule 40 (expr -> expr TIMES expr .)
    IN              reduce using rule 40 (expr -> expr TIMES expr .)
    DDOT            reduce using rule 40 (expr -> expr TIMES expr .)
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! DEQUALS         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! NEQUALS         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! RABRACK         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! LABRACK         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! GEQUALS         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! LEQUALS         [ reduce using rule 40 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 71

    (41) expr -> expr DIVIDE expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 41 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 41 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 41 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 41 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 41 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 41 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 41 (expr -> expr DIVIDE expr .)
    RSBRACK         reduce using rule 41 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 41 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 41 (expr -> expr DIVIDE expr .)
    LCBRACK         reduce using rule 41 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 41 (expr -> expr DIVIDE expr .)
    FUNC            reduce using rule 41 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 41 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 41 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 41 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 41 (expr -> expr DIVIDE expr .)
    CLASS           reduce using rule 41 (expr -> expr DIVIDE expr .)
    SLCOM           reduce using rule 41 (expr -> expr DIVIDE expr .)
    HSCOM           reduce using rule 41 (expr -> expr DIVIDE expr .)
    MLCOM           reduce using rule 41 (expr -> expr DIVIDE expr .)
    NAME            reduce using rule 41 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 41 (expr -> expr DIVIDE expr .)
    FLOAT           reduce using rule 41 (expr -> expr DIVIDE expr .)
    CHAR            reduce using rule 41 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 41 (expr -> expr DIVIDE expr .)
    LSBRACK         reduce using rule 41 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 41 (expr -> expr DIVIDE expr .)
    RCBRACK         reduce using rule 41 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 41 (expr -> expr DIVIDE expr .)
    DDOT            reduce using rule 41 (expr -> expr DIVIDE expr .)
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! DEQUALS         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! NEQUALS         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! RABRACK         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! LABRACK         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! GEQUALS         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! LEQUALS         [ reduce using rule 41 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 72

    (42) expr -> expr DEQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 42 (expr -> expr DEQUALS expr .)
    MINUS           reduce using rule 42 (expr -> expr DEQUALS expr .)
    TIMES           reduce using rule 42 (expr -> expr DEQUALS expr .)
    DIVIDE          reduce using rule 42 (expr -> expr DEQUALS expr .)
    COLON           reduce using rule 42 (expr -> expr DEQUALS expr .)
    NEWLINE         reduce using rule 42 (expr -> expr DEQUALS expr .)
    $end            reduce using rule 42 (expr -> expr DEQUALS expr .)
    RSBRACK         reduce using rule 42 (expr -> expr DEQUALS expr .)
    COMMA           reduce using rule 42 (expr -> expr DEQUALS expr .)
    RPAREN          reduce using rule 42 (expr -> expr DEQUALS expr .)
    LCBRACK         reduce using rule 42 (expr -> expr DEQUALS expr .)
    LPAREN          reduce using rule 42 (expr -> expr DEQUALS expr .)
    FUNC            reduce using rule 42 (expr -> expr DEQUALS expr .)
    IF              reduce using rule 42 (expr -> expr DEQUALS expr .)
    WHILE           reduce using rule 42 (expr -> expr DEQUALS expr .)
    FOR             reduce using rule 42 (expr -> expr DEQUALS expr .)
    RETURN          reduce using rule 42 (expr -> expr DEQUALS expr .)
    CLASS           reduce using rule 42 (expr -> expr DEQUALS expr .)
    SLCOM           reduce using rule 42 (expr -> expr DEQUALS expr .)
    HSCOM           reduce using rule 42 (expr -> expr DEQUALS expr .)
    MLCOM           reduce using rule 42 (expr -> expr DEQUALS expr .)
    NAME            reduce using rule 42 (expr -> expr DEQUALS expr .)
    NUMBER          reduce using rule 42 (expr -> expr DEQUALS expr .)
    FLOAT           reduce using rule 42 (expr -> expr DEQUALS expr .)
    CHAR            reduce using rule 42 (expr -> expr DEQUALS expr .)
    STRING          reduce using rule 42 (expr -> expr DEQUALS expr .)
    LSBRACK         reduce using rule 42 (expr -> expr DEQUALS expr .)
    ELSE            reduce using rule 42 (expr -> expr DEQUALS expr .)
    RCBRACK         reduce using rule 42 (expr -> expr DEQUALS expr .)
    IN              reduce using rule 42 (expr -> expr DEQUALS expr .)
    DDOT            reduce using rule 42 (expr -> expr DEQUALS expr .)
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! DEQUALS         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! NEQUALS         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! RABRACK         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! LABRACK         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! GEQUALS         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! LEQUALS         [ reduce using rule 42 (expr -> expr DEQUALS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]


state 73

    (43) expr -> expr NEQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 43 (expr -> expr NEQUALS expr .)
    MINUS           reduce using rule 43 (expr -> expr NEQUALS expr .)
    TIMES           reduce using rule 43 (expr -> expr NEQUALS expr .)
    DIVIDE          reduce using rule 43 (expr -> expr NEQUALS expr .)
    DEQUALS         reduce using rule 43 (expr -> expr NEQUALS expr .)
    COLON           reduce using rule 43 (expr -> expr NEQUALS expr .)
    NEWLINE         reduce using rule 43 (expr -> expr NEQUALS expr .)
    $end            reduce using rule 43 (expr -> expr NEQUALS expr .)
    RSBRACK         reduce using rule 43 (expr -> expr NEQUALS expr .)
    COMMA           reduce using rule 43 (expr -> expr NEQUALS expr .)
    RPAREN          reduce using rule 43 (expr -> expr NEQUALS expr .)
    LCBRACK         reduce using rule 43 (expr -> expr NEQUALS expr .)
    LPAREN          reduce using rule 43 (expr -> expr NEQUALS expr .)
    FUNC            reduce using rule 43 (expr -> expr NEQUALS expr .)
    IF              reduce using rule 43 (expr -> expr NEQUALS expr .)
    WHILE           reduce using rule 43 (expr -> expr NEQUALS expr .)
    FOR             reduce using rule 43 (expr -> expr NEQUALS expr .)
    RETURN          reduce using rule 43 (expr -> expr NEQUALS expr .)
    CLASS           reduce using rule 43 (expr -> expr NEQUALS expr .)
    SLCOM           reduce using rule 43 (expr -> expr NEQUALS expr .)
    HSCOM           reduce using rule 43 (expr -> expr NEQUALS expr .)
    MLCOM           reduce using rule 43 (expr -> expr NEQUALS expr .)
    NAME            reduce using rule 43 (expr -> expr NEQUALS expr .)
    NUMBER          reduce using rule 43 (expr -> expr NEQUALS expr .)
    FLOAT           reduce using rule 43 (expr -> expr NEQUALS expr .)
    CHAR            reduce using rule 43 (expr -> expr NEQUALS expr .)
    STRING          reduce using rule 43 (expr -> expr NEQUALS expr .)
    LSBRACK         reduce using rule 43 (expr -> expr NEQUALS expr .)
    ELSE            reduce using rule 43 (expr -> expr NEQUALS expr .)
    RCBRACK         reduce using rule 43 (expr -> expr NEQUALS expr .)
    IN              reduce using rule 43 (expr -> expr NEQUALS expr .)
    DDOT            reduce using rule 43 (expr -> expr NEQUALS expr .)
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! NEQUALS         [ reduce using rule 43 (expr -> expr NEQUALS expr .) ]
  ! RABRACK         [ reduce using rule 43 (expr -> expr NEQUALS expr .) ]
  ! LABRACK         [ reduce using rule 43 (expr -> expr NEQUALS expr .) ]
  ! GEQUALS         [ reduce using rule 43 (expr -> expr NEQUALS expr .) ]
  ! LEQUALS         [ reduce using rule 43 (expr -> expr NEQUALS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! DEQUALS         [ shift and go to state 41 ]


state 74

    (44) expr -> expr RABRACK expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 44 (expr -> expr RABRACK expr .)
    MINUS           reduce using rule 44 (expr -> expr RABRACK expr .)
    TIMES           reduce using rule 44 (expr -> expr RABRACK expr .)
    DIVIDE          reduce using rule 44 (expr -> expr RABRACK expr .)
    DEQUALS         reduce using rule 44 (expr -> expr RABRACK expr .)
    NEQUALS         reduce using rule 44 (expr -> expr RABRACK expr .)
    GEQUALS         reduce using rule 44 (expr -> expr RABRACK expr .)
    LEQUALS         reduce using rule 44 (expr -> expr RABRACK expr .)
    COLON           reduce using rule 44 (expr -> expr RABRACK expr .)
    NEWLINE         reduce using rule 44 (expr -> expr RABRACK expr .)
    $end            reduce using rule 44 (expr -> expr RABRACK expr .)
    RSBRACK         reduce using rule 44 (expr -> expr RABRACK expr .)
    COMMA           reduce using rule 44 (expr -> expr RABRACK expr .)
    RPAREN          reduce using rule 44 (expr -> expr RABRACK expr .)
    LCBRACK         reduce using rule 44 (expr -> expr RABRACK expr .)
    LPAREN          reduce using rule 44 (expr -> expr RABRACK expr .)
    FUNC            reduce using rule 44 (expr -> expr RABRACK expr .)
    IF              reduce using rule 44 (expr -> expr RABRACK expr .)
    WHILE           reduce using rule 44 (expr -> expr RABRACK expr .)
    FOR             reduce using rule 44 (expr -> expr RABRACK expr .)
    RETURN          reduce using rule 44 (expr -> expr RABRACK expr .)
    CLASS           reduce using rule 44 (expr -> expr RABRACK expr .)
    SLCOM           reduce using rule 44 (expr -> expr RABRACK expr .)
    HSCOM           reduce using rule 44 (expr -> expr RABRACK expr .)
    MLCOM           reduce using rule 44 (expr -> expr RABRACK expr .)
    NAME            reduce using rule 44 (expr -> expr RABRACK expr .)
    NUMBER          reduce using rule 44 (expr -> expr RABRACK expr .)
    FLOAT           reduce using rule 44 (expr -> expr RABRACK expr .)
    CHAR            reduce using rule 44 (expr -> expr RABRACK expr .)
    STRING          reduce using rule 44 (expr -> expr RABRACK expr .)
    LSBRACK         reduce using rule 44 (expr -> expr RABRACK expr .)
    ELSE            reduce using rule 44 (expr -> expr RABRACK expr .)
    RCBRACK         reduce using rule 44 (expr -> expr RABRACK expr .)
    IN              reduce using rule 44 (expr -> expr RABRACK expr .)
    DDOT            reduce using rule 44 (expr -> expr RABRACK expr .)
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44

  ! RABRACK         [ reduce using rule 44 (expr -> expr RABRACK expr .) ]
  ! LABRACK         [ reduce using rule 44 (expr -> expr RABRACK expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! DEQUALS         [ shift and go to state 41 ]
  ! NEQUALS         [ shift and go to state 42 ]
  ! GEQUALS         [ shift and go to state 45 ]
  ! LEQUALS         [ shift and go to state 46 ]


state 75

    (45) expr -> expr LABRACK expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 45 (expr -> expr LABRACK expr .)
    MINUS           reduce using rule 45 (expr -> expr LABRACK expr .)
    TIMES           reduce using rule 45 (expr -> expr LABRACK expr .)
    DIVIDE          reduce using rule 45 (expr -> expr LABRACK expr .)
    DEQUALS         reduce using rule 45 (expr -> expr LABRACK expr .)
    NEQUALS         reduce using rule 45 (expr -> expr LABRACK expr .)
    RABRACK         reduce using rule 45 (expr -> expr LABRACK expr .)
    GEQUALS         reduce using rule 45 (expr -> expr LABRACK expr .)
    LEQUALS         reduce using rule 45 (expr -> expr LABRACK expr .)
    COLON           reduce using rule 45 (expr -> expr LABRACK expr .)
    NEWLINE         reduce using rule 45 (expr -> expr LABRACK expr .)
    $end            reduce using rule 45 (expr -> expr LABRACK expr .)
    RSBRACK         reduce using rule 45 (expr -> expr LABRACK expr .)
    COMMA           reduce using rule 45 (expr -> expr LABRACK expr .)
    RPAREN          reduce using rule 45 (expr -> expr LABRACK expr .)
    LCBRACK         reduce using rule 45 (expr -> expr LABRACK expr .)
    LPAREN          reduce using rule 45 (expr -> expr LABRACK expr .)
    FUNC            reduce using rule 45 (expr -> expr LABRACK expr .)
    IF              reduce using rule 45 (expr -> expr LABRACK expr .)
    WHILE           reduce using rule 45 (expr -> expr LABRACK expr .)
    FOR             reduce using rule 45 (expr -> expr LABRACK expr .)
    RETURN          reduce using rule 45 (expr -> expr LABRACK expr .)
    CLASS           reduce using rule 45 (expr -> expr LABRACK expr .)
    SLCOM           reduce using rule 45 (expr -> expr LABRACK expr .)
    HSCOM           reduce using rule 45 (expr -> expr LABRACK expr .)
    MLCOM           reduce using rule 45 (expr -> expr LABRACK expr .)
    NAME            reduce using rule 45 (expr -> expr LABRACK expr .)
    NUMBER          reduce using rule 45 (expr -> expr LABRACK expr .)
    FLOAT           reduce using rule 45 (expr -> expr LABRACK expr .)
    CHAR            reduce using rule 45 (expr -> expr LABRACK expr .)
    STRING          reduce using rule 45 (expr -> expr LABRACK expr .)
    LSBRACK         reduce using rule 45 (expr -> expr LABRACK expr .)
    ELSE            reduce using rule 45 (expr -> expr LABRACK expr .)
    RCBRACK         reduce using rule 45 (expr -> expr LABRACK expr .)
    IN              reduce using rule 45 (expr -> expr LABRACK expr .)
    DDOT            reduce using rule 45 (expr -> expr LABRACK expr .)
    LABRACK         shift and go to state 44

  ! LABRACK         [ reduce using rule 45 (expr -> expr LABRACK expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! DEQUALS         [ shift and go to state 41 ]
  ! NEQUALS         [ shift and go to state 42 ]
  ! RABRACK         [ shift and go to state 43 ]
  ! GEQUALS         [ shift and go to state 45 ]
  ! LEQUALS         [ shift and go to state 46 ]


state 76

    (46) expr -> expr GEQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 46 (expr -> expr GEQUALS expr .)
    MINUS           reduce using rule 46 (expr -> expr GEQUALS expr .)
    TIMES           reduce using rule 46 (expr -> expr GEQUALS expr .)
    DIVIDE          reduce using rule 46 (expr -> expr GEQUALS expr .)
    DEQUALS         reduce using rule 46 (expr -> expr GEQUALS expr .)
    NEQUALS         reduce using rule 46 (expr -> expr GEQUALS expr .)
    COLON           reduce using rule 46 (expr -> expr GEQUALS expr .)
    NEWLINE         reduce using rule 46 (expr -> expr GEQUALS expr .)
    $end            reduce using rule 46 (expr -> expr GEQUALS expr .)
    RSBRACK         reduce using rule 46 (expr -> expr GEQUALS expr .)
    COMMA           reduce using rule 46 (expr -> expr GEQUALS expr .)
    RPAREN          reduce using rule 46 (expr -> expr GEQUALS expr .)
    LCBRACK         reduce using rule 46 (expr -> expr GEQUALS expr .)
    LPAREN          reduce using rule 46 (expr -> expr GEQUALS expr .)
    FUNC            reduce using rule 46 (expr -> expr GEQUALS expr .)
    IF              reduce using rule 46 (expr -> expr GEQUALS expr .)
    WHILE           reduce using rule 46 (expr -> expr GEQUALS expr .)
    FOR             reduce using rule 46 (expr -> expr GEQUALS expr .)
    RETURN          reduce using rule 46 (expr -> expr GEQUALS expr .)
    CLASS           reduce using rule 46 (expr -> expr GEQUALS expr .)
    SLCOM           reduce using rule 46 (expr -> expr GEQUALS expr .)
    HSCOM           reduce using rule 46 (expr -> expr GEQUALS expr .)
    MLCOM           reduce using rule 46 (expr -> expr GEQUALS expr .)
    NAME            reduce using rule 46 (expr -> expr GEQUALS expr .)
    NUMBER          reduce using rule 46 (expr -> expr GEQUALS expr .)
    FLOAT           reduce using rule 46 (expr -> expr GEQUALS expr .)
    CHAR            reduce using rule 46 (expr -> expr GEQUALS expr .)
    STRING          reduce using rule 46 (expr -> expr GEQUALS expr .)
    LSBRACK         reduce using rule 46 (expr -> expr GEQUALS expr .)
    ELSE            reduce using rule 46 (expr -> expr GEQUALS expr .)
    RCBRACK         reduce using rule 46 (expr -> expr GEQUALS expr .)
    IN              reduce using rule 46 (expr -> expr GEQUALS expr .)
    DDOT            reduce using rule 46 (expr -> expr GEQUALS expr .)
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46

  ! RABRACK         [ reduce using rule 46 (expr -> expr GEQUALS expr .) ]
  ! LABRACK         [ reduce using rule 46 (expr -> expr GEQUALS expr .) ]
  ! GEQUALS         [ reduce using rule 46 (expr -> expr GEQUALS expr .) ]
  ! LEQUALS         [ reduce using rule 46 (expr -> expr GEQUALS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! DEQUALS         [ shift and go to state 41 ]
  ! NEQUALS         [ shift and go to state 42 ]


state 77

    (47) expr -> expr LEQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    PLUS            reduce using rule 47 (expr -> expr LEQUALS expr .)
    MINUS           reduce using rule 47 (expr -> expr LEQUALS expr .)
    TIMES           reduce using rule 47 (expr -> expr LEQUALS expr .)
    DIVIDE          reduce using rule 47 (expr -> expr LEQUALS expr .)
    DEQUALS         reduce using rule 47 (expr -> expr LEQUALS expr .)
    NEQUALS         reduce using rule 47 (expr -> expr LEQUALS expr .)
    GEQUALS         reduce using rule 47 (expr -> expr LEQUALS expr .)
    COLON           reduce using rule 47 (expr -> expr LEQUALS expr .)
    NEWLINE         reduce using rule 47 (expr -> expr LEQUALS expr .)
    $end            reduce using rule 47 (expr -> expr LEQUALS expr .)
    RSBRACK         reduce using rule 47 (expr -> expr LEQUALS expr .)
    COMMA           reduce using rule 47 (expr -> expr LEQUALS expr .)
    RPAREN          reduce using rule 47 (expr -> expr LEQUALS expr .)
    LCBRACK         reduce using rule 47 (expr -> expr LEQUALS expr .)
    LPAREN          reduce using rule 47 (expr -> expr LEQUALS expr .)
    FUNC            reduce using rule 47 (expr -> expr LEQUALS expr .)
    IF              reduce using rule 47 (expr -> expr LEQUALS expr .)
    WHILE           reduce using rule 47 (expr -> expr LEQUALS expr .)
    FOR             reduce using rule 47 (expr -> expr LEQUALS expr .)
    RETURN          reduce using rule 47 (expr -> expr LEQUALS expr .)
    CLASS           reduce using rule 47 (expr -> expr LEQUALS expr .)
    SLCOM           reduce using rule 47 (expr -> expr LEQUALS expr .)
    HSCOM           reduce using rule 47 (expr -> expr LEQUALS expr .)
    MLCOM           reduce using rule 47 (expr -> expr LEQUALS expr .)
    NAME            reduce using rule 47 (expr -> expr LEQUALS expr .)
    NUMBER          reduce using rule 47 (expr -> expr LEQUALS expr .)
    FLOAT           reduce using rule 47 (expr -> expr LEQUALS expr .)
    CHAR            reduce using rule 47 (expr -> expr LEQUALS expr .)
    STRING          reduce using rule 47 (expr -> expr LEQUALS expr .)
    LSBRACK         reduce using rule 47 (expr -> expr LEQUALS expr .)
    ELSE            reduce using rule 47 (expr -> expr LEQUALS expr .)
    RCBRACK         reduce using rule 47 (expr -> expr LEQUALS expr .)
    IN              reduce using rule 47 (expr -> expr LEQUALS expr .)
    DDOT            reduce using rule 47 (expr -> expr LEQUALS expr .)
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    LEQUALS         shift and go to state 46

  ! RABRACK         [ reduce using rule 47 (expr -> expr LEQUALS expr .) ]
  ! LABRACK         [ reduce using rule 47 (expr -> expr LEQUALS expr .) ]
  ! LEQUALS         [ reduce using rule 47 (expr -> expr LEQUALS expr .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! TIMES           [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! DEQUALS         [ shift and go to state 41 ]
  ! NEQUALS         [ shift and go to state 42 ]
  ! GEQUALS         [ shift and go to state 45 ]


state 78

    (36) expr -> id LSBRACK expr . RSBRACK
    (53) assign -> id LSBRACK expr . RSBRACK EQUALS assign
    (54) assign -> id LSBRACK expr . RSBRACK EQUALS expr
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RSBRACK         shift and go to state 101
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 79

    (53) assign -> id . LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> id . LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> id . EQUALS assign
    (56) assign -> id . EQUALS expr
    (36) expr -> id . LSBRACK expr RSBRACK
    (37) expr -> id .

    LSBRACK         shift and go to state 102
    EQUALS          shift and go to state 48
    PLUS            reduce using rule 37 (expr -> id .)
    MINUS           reduce using rule 37 (expr -> id .)
    TIMES           reduce using rule 37 (expr -> id .)
    DIVIDE          reduce using rule 37 (expr -> id .)
    DEQUALS         reduce using rule 37 (expr -> id .)
    NEQUALS         reduce using rule 37 (expr -> id .)
    RABRACK         reduce using rule 37 (expr -> id .)
    LABRACK         reduce using rule 37 (expr -> id .)
    GEQUALS         reduce using rule 37 (expr -> id .)
    LEQUALS         reduce using rule 37 (expr -> id .)
    COLON           reduce using rule 37 (expr -> id .)
    NEWLINE         reduce using rule 37 (expr -> id .)
    $end            reduce using rule 37 (expr -> id .)
    RCBRACK         reduce using rule 37 (expr -> id .)
    ELSE            reduce using rule 37 (expr -> id .)


state 80

    (55) assign -> id EQUALS assign .

    COLON           reduce using rule 55 (assign -> id EQUALS assign .)
    NEWLINE         reduce using rule 55 (assign -> id EQUALS assign .)
    $end            reduce using rule 55 (assign -> id EQUALS assign .)
    RCBRACK         reduce using rule 55 (assign -> id EQUALS assign .)
    ELSE            reduce using rule 55 (assign -> id EQUALS assign .)


state 81

    (56) assign -> id EQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    COLON           reduce using rule 56 (assign -> id EQUALS expr .)
    NEWLINE         reduce using rule 56 (assign -> id EQUALS expr .)
    $end            reduce using rule 56 (assign -> id EQUALS expr .)
    RCBRACK         reduce using rule 56 (assign -> id EQUALS expr .)
    ELSE            reduce using rule 56 (assign -> id EQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 82

    (57) id -> NAME . method
    (52) call -> NAME . arg_list
    (49) method -> NAME .
    (49) method -> . NAME
    (50) method -> . method DOT NAME
    (28) arg_list -> . LPAREN RPAREN
    (29) arg_list -> . LPAREN expr RPAREN
    (30) arg_list -> . LPAREN lst RPAREN

    DOT             reduce using rule 49 (method -> NAME .)
    LSBRACK         reduce using rule 49 (method -> NAME .)
    EQUALS          reduce using rule 49 (method -> NAME .)
    PLUS            reduce using rule 49 (method -> NAME .)
    MINUS           reduce using rule 49 (method -> NAME .)
    TIMES           reduce using rule 49 (method -> NAME .)
    DIVIDE          reduce using rule 49 (method -> NAME .)
    DEQUALS         reduce using rule 49 (method -> NAME .)
    NEQUALS         reduce using rule 49 (method -> NAME .)
    RABRACK         reduce using rule 49 (method -> NAME .)
    LABRACK         reduce using rule 49 (method -> NAME .)
    GEQUALS         reduce using rule 49 (method -> NAME .)
    LEQUALS         reduce using rule 49 (method -> NAME .)
    COLON           reduce using rule 49 (method -> NAME .)
    NEWLINE         reduce using rule 49 (method -> NAME .)
    $end            reduce using rule 49 (method -> NAME .)
    RCBRACK         reduce using rule 49 (method -> NAME .)
    ELSE            reduce using rule 49 (method -> NAME .)
    NAME            shift and go to state 61
    LPAREN          shift and go to state 64

    method                         shift and go to state 63
    arg_list                       shift and go to state 62

state 83

    (58) id -> method .
    (51) call -> method . DOT NAME arg_list
    (50) method -> method . DOT NAME

    LSBRACK         reduce using rule 58 (id -> method .)
    EQUALS          reduce using rule 58 (id -> method .)
    PLUS            reduce using rule 58 (id -> method .)
    MINUS           reduce using rule 58 (id -> method .)
    TIMES           reduce using rule 58 (id -> method .)
    DIVIDE          reduce using rule 58 (id -> method .)
    DEQUALS         reduce using rule 58 (id -> method .)
    NEQUALS         reduce using rule 58 (id -> method .)
    RABRACK         reduce using rule 58 (id -> method .)
    LABRACK         reduce using rule 58 (id -> method .)
    GEQUALS         reduce using rule 58 (id -> method .)
    LEQUALS         reduce using rule 58 (id -> method .)
    COLON           reduce using rule 58 (id -> method .)
    NEWLINE         reduce using rule 58 (id -> method .)
    $end            reduce using rule 58 (id -> method .)
    RCBRACK         reduce using rule 58 (id -> method .)
    ELSE            reduce using rule 58 (id -> method .)
    DOT             shift and go to state 65


state 84

    (31) array -> LSBRACK lst RSBRACK .

    PLUS            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    MINUS           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    TIMES           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    DIVIDE          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    DEQUALS         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    NEQUALS         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    RABRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    LABRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    GEQUALS         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    LEQUALS         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    COLON           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    NEWLINE         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    $end            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    RSBRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    COMMA           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    RPAREN          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    LCBRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    LPAREN          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    FUNC            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    IF              reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    WHILE           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    FOR             reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    RETURN          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    CLASS           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    SLCOM           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    HSCOM           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    MLCOM           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    NAME            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    NUMBER          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    FLOAT           reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    CHAR            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    STRING          reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    LSBRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    ELSE            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    RCBRACK         reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    IN              reduce using rule 31 (array -> LSBRACK lst RSBRACK .)
    DDOT            reduce using rule 31 (array -> LSBRACK lst RSBRACK .)


state 85

    (32) array -> LSBRACK expr RSBRACK .

    PLUS            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    MINUS           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    TIMES           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    DIVIDE          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    DEQUALS         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    NEQUALS         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    RABRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    LABRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    GEQUALS         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    LEQUALS         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    COLON           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    NEWLINE         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    $end            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    RSBRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    COMMA           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    RPAREN          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    LCBRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    LPAREN          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    FUNC            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    IF              reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    WHILE           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    FOR             reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    RETURN          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    CLASS           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    SLCOM           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    HSCOM           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    MLCOM           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    NAME            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    NUMBER          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    FLOAT           reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    CHAR            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    STRING          reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    LSBRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    ELSE            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    RCBRACK         reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    IN              reduce using rule 32 (array -> LSBRACK expr RSBRACK .)
    DDOT            reduce using rule 32 (array -> LSBRACK expr RSBRACK .)


state 86

    (33) lst -> expr COMMA .
    (34) lst -> expr COMMA . lst
    (35) lst -> expr COMMA . expr
    (33) lst -> . expr COMMA
    (34) lst -> . expr COMMA lst
    (35) lst -> . expr COMMA expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    RSBRACK         reduce using rule 33 (lst -> expr COMMA .)
    RPAREN          reduce using rule 33 (lst -> expr COMMA .)
    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 103
    lst                            shift and go to state 104
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 87

    (36) expr -> id LSBRACK . expr RSBRACK
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 51
    expr                           shift and go to state 105
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 30

state 88

    (48) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DEQUALS         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NEQUALS         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RABRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LABRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    GEQUALS         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LEQUALS         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RSBRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LCBRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    FUNC            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    CLASS           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    SLCOM           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    HSCOM           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    MLCOM           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NAME            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    FLOAT           reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    CHAR            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    LSBRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    RCBRACK         reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 48 (expr -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 48 (expr -> LPAREN expr RPAREN .)


state 89

    (59) function -> FUNC id arg_list . suite
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 17
    suite                          shift and go to state 106
    stmt                           shift and go to state 92
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 30

state 90

    (50) method -> method DOT . NAME

    NAME            shift and go to state 107


state 91

    (60) if -> IF expr suite . else
    (61) if -> IF expr suite .
    (62) else -> . ELSE suite

  ! shift/reduce conflict for ELSE resolved as shift
    COLON           reduce using rule 61 (if -> IF expr suite .)
    NEWLINE         reduce using rule 61 (if -> IF expr suite .)
    $end            reduce using rule 61 (if -> IF expr suite .)
    RCBRACK         reduce using rule 61 (if -> IF expr suite .)
    ELSE            shift and go to state 109

  ! ELSE            [ reduce using rule 61 (if -> IF expr suite .) ]

    else                           shift and go to state 108

state 92

    (18) suite -> stmt .

    ELSE            reduce using rule 18 (suite -> stmt .)
    COLON           reduce using rule 18 (suite -> stmt .)
    NEWLINE         reduce using rule 18 (suite -> stmt .)
    $end            reduce using rule 18 (suite -> stmt .)
    RCBRACK         reduce using rule 18 (suite -> stmt .)


state 93

    (19) suite -> LCBRACK . stmts RCBRACK
    (2) stmts -> . stmt
    (3) stmts -> . stmt COLON stmts
    (4) stmts -> . stmt NEWLINE stmts
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    stmts                          shift and go to state 110
    stmt                           shift and go to state 3
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 94

    (63) while -> WHILE expr suite .

    COLON           reduce using rule 63 (while -> WHILE expr suite .)
    NEWLINE         reduce using rule 63 (while -> WHILE expr suite .)
    $end            reduce using rule 63 (while -> WHILE expr suite .)
    RCBRACK         reduce using rule 63 (while -> WHILE expr suite .)
    ELSE            reduce using rule 63 (while -> WHILE expr suite .)


state 95

    (66) for -> FOR expr IN . expr DDOT expr suite
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 111
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 96

    (65) class -> CLASS NAME suite .

    COLON           reduce using rule 65 (class -> CLASS NAME suite .)
    NEWLINE         reduce using rule 65 (class -> CLASS NAME suite .)
    $end            reduce using rule 65 (class -> CLASS NAME suite .)
    RCBRACK         reduce using rule 65 (class -> CLASS NAME suite .)
    ELSE            reduce using rule 65 (class -> CLASS NAME suite .)


state 97

    (28) arg_list -> LPAREN RPAREN .

    PLUS            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    MINUS           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    TIMES           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    DEQUALS         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    NEQUALS         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    RABRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    LABRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    GEQUALS         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    LEQUALS         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    COLON           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    NEWLINE         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    $end            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    RSBRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    COMMA           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    RPAREN          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    LCBRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    FUNC            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    IF              reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    WHILE           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    FOR             reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    RETURN          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    CLASS           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    SLCOM           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    HSCOM           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    MLCOM           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    NAME            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    NUMBER          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    FLOAT           reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    CHAR            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    STRING          reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    LSBRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    ELSE            reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    RCBRACK         reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    IN              reduce using rule 28 (arg_list -> LPAREN RPAREN .)
    DDOT            reduce using rule 28 (arg_list -> LPAREN RPAREN .)


state 98

    (29) arg_list -> LPAREN expr . RPAREN
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr
    (33) lst -> expr . COMMA
    (34) lst -> expr . COMMA lst
    (35) lst -> expr . COMMA expr

    RPAREN          shift and go to state 112
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46
    COMMA           shift and go to state 86


state 99

    (30) arg_list -> LPAREN lst . RPAREN

    RPAREN          shift and go to state 113


state 100

    (51) call -> method DOT NAME . arg_list
    (50) method -> method DOT NAME .
    (28) arg_list -> . LPAREN RPAREN
    (29) arg_list -> . LPAREN expr RPAREN
    (30) arg_list -> . LPAREN lst RPAREN

    DOT             reduce using rule 50 (method -> method DOT NAME .)
    LSBRACK         reduce using rule 50 (method -> method DOT NAME .)
    EQUALS          reduce using rule 50 (method -> method DOT NAME .)
    PLUS            reduce using rule 50 (method -> method DOT NAME .)
    MINUS           reduce using rule 50 (method -> method DOT NAME .)
    TIMES           reduce using rule 50 (method -> method DOT NAME .)
    DIVIDE          reduce using rule 50 (method -> method DOT NAME .)
    DEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    NEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    RABRACK         reduce using rule 50 (method -> method DOT NAME .)
    LABRACK         reduce using rule 50 (method -> method DOT NAME .)
    GEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    LEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    COLON           reduce using rule 50 (method -> method DOT NAME .)
    NEWLINE         reduce using rule 50 (method -> method DOT NAME .)
    $end            reduce using rule 50 (method -> method DOT NAME .)
    RSBRACK         reduce using rule 50 (method -> method DOT NAME .)
    COMMA           reduce using rule 50 (method -> method DOT NAME .)
    RPAREN          reduce using rule 50 (method -> method DOT NAME .)
    LCBRACK         reduce using rule 50 (method -> method DOT NAME .)
    FUNC            reduce using rule 50 (method -> method DOT NAME .)
    IF              reduce using rule 50 (method -> method DOT NAME .)
    WHILE           reduce using rule 50 (method -> method DOT NAME .)
    FOR             reduce using rule 50 (method -> method DOT NAME .)
    RETURN          reduce using rule 50 (method -> method DOT NAME .)
    CLASS           reduce using rule 50 (method -> method DOT NAME .)
    SLCOM           reduce using rule 50 (method -> method DOT NAME .)
    HSCOM           reduce using rule 50 (method -> method DOT NAME .)
    MLCOM           reduce using rule 50 (method -> method DOT NAME .)
    NAME            reduce using rule 50 (method -> method DOT NAME .)
    NUMBER          reduce using rule 50 (method -> method DOT NAME .)
    FLOAT           reduce using rule 50 (method -> method DOT NAME .)
    CHAR            reduce using rule 50 (method -> method DOT NAME .)
    STRING          reduce using rule 50 (method -> method DOT NAME .)
    ELSE            reduce using rule 50 (method -> method DOT NAME .)
    RCBRACK         reduce using rule 50 (method -> method DOT NAME .)
    IN              reduce using rule 50 (method -> method DOT NAME .)
    DDOT            reduce using rule 50 (method -> method DOT NAME .)
    LPAREN          shift and go to state 64

  ! LPAREN          [ reduce using rule 50 (method -> method DOT NAME .) ]

    arg_list                       shift and go to state 114

state 101

    (36) expr -> id LSBRACK expr RSBRACK .
    (53) assign -> id LSBRACK expr RSBRACK . EQUALS assign
    (54) assign -> id LSBRACK expr RSBRACK . EQUALS expr

    PLUS            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    MINUS           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    TIMES           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DIVIDE          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    GEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    COLON           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEWLINE         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    $end            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RCBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    ELSE            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    EQUALS          shift and go to state 115


state 102

    (53) assign -> id LSBRACK . expr RSBRACK EQUALS assign
    (54) assign -> id LSBRACK . expr RSBRACK EQUALS expr
    (36) expr -> id LSBRACK . expr RSBRACK
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 51
    expr                           shift and go to state 116
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 30

state 103

    (35) lst -> expr COMMA expr .
    (33) lst -> expr . COMMA
    (34) lst -> expr . COMMA lst
    (35) lst -> expr . COMMA expr
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RSBRACK         reduce using rule 35 (lst -> expr COMMA expr .)
    RPAREN          reduce using rule 35 (lst -> expr COMMA expr .)
    COMMA           shift and go to state 86
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 104

    (34) lst -> expr COMMA lst .

    RSBRACK         reduce using rule 34 (lst -> expr COMMA lst .)
    RPAREN          reduce using rule 34 (lst -> expr COMMA lst .)


state 105

    (36) expr -> id LSBRACK expr . RSBRACK
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RSBRACK         shift and go to state 117
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 106

    (59) function -> FUNC id arg_list suite .

    COLON           reduce using rule 59 (function -> FUNC id arg_list suite .)
    NEWLINE         reduce using rule 59 (function -> FUNC id arg_list suite .)
    $end            reduce using rule 59 (function -> FUNC id arg_list suite .)
    RCBRACK         reduce using rule 59 (function -> FUNC id arg_list suite .)
    ELSE            reduce using rule 59 (function -> FUNC id arg_list suite .)


state 107

    (50) method -> method DOT NAME .

    DOT             reduce using rule 50 (method -> method DOT NAME .)
    LPAREN          reduce using rule 50 (method -> method DOT NAME .)
    LSBRACK         reduce using rule 50 (method -> method DOT NAME .)
    EQUALS          reduce using rule 50 (method -> method DOT NAME .)
    PLUS            reduce using rule 50 (method -> method DOT NAME .)
    MINUS           reduce using rule 50 (method -> method DOT NAME .)
    TIMES           reduce using rule 50 (method -> method DOT NAME .)
    DIVIDE          reduce using rule 50 (method -> method DOT NAME .)
    DEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    NEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    RABRACK         reduce using rule 50 (method -> method DOT NAME .)
    LABRACK         reduce using rule 50 (method -> method DOT NAME .)
    GEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    LEQUALS         reduce using rule 50 (method -> method DOT NAME .)
    COLON           reduce using rule 50 (method -> method DOT NAME .)
    NEWLINE         reduce using rule 50 (method -> method DOT NAME .)
    $end            reduce using rule 50 (method -> method DOT NAME .)
    RSBRACK         reduce using rule 50 (method -> method DOT NAME .)
    COMMA           reduce using rule 50 (method -> method DOT NAME .)
    RPAREN          reduce using rule 50 (method -> method DOT NAME .)
    LCBRACK         reduce using rule 50 (method -> method DOT NAME .)
    FUNC            reduce using rule 50 (method -> method DOT NAME .)
    IF              reduce using rule 50 (method -> method DOT NAME .)
    WHILE           reduce using rule 50 (method -> method DOT NAME .)
    FOR             reduce using rule 50 (method -> method DOT NAME .)
    RETURN          reduce using rule 50 (method -> method DOT NAME .)
    CLASS           reduce using rule 50 (method -> method DOT NAME .)
    SLCOM           reduce using rule 50 (method -> method DOT NAME .)
    HSCOM           reduce using rule 50 (method -> method DOT NAME .)
    MLCOM           reduce using rule 50 (method -> method DOT NAME .)
    NAME            reduce using rule 50 (method -> method DOT NAME .)
    NUMBER          reduce using rule 50 (method -> method DOT NAME .)
    FLOAT           reduce using rule 50 (method -> method DOT NAME .)
    CHAR            reduce using rule 50 (method -> method DOT NAME .)
    STRING          reduce using rule 50 (method -> method DOT NAME .)
    ELSE            reduce using rule 50 (method -> method DOT NAME .)
    RCBRACK         reduce using rule 50 (method -> method DOT NAME .)
    IN              reduce using rule 50 (method -> method DOT NAME .)
    DDOT            reduce using rule 50 (method -> method DOT NAME .)


state 108

    (60) if -> IF expr suite else .

    COLON           reduce using rule 60 (if -> IF expr suite else .)
    NEWLINE         reduce using rule 60 (if -> IF expr suite else .)
    $end            reduce using rule 60 (if -> IF expr suite else .)
    RCBRACK         reduce using rule 60 (if -> IF expr suite else .)
    ELSE            reduce using rule 60 (if -> IF expr suite else .)


state 109

    (62) else -> ELSE . suite
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    suite                          shift and go to state 118
    stmt                           shift and go to state 92
    expr                           shift and go to state 4
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 110

    (19) suite -> LCBRACK stmts . RCBRACK

    RCBRACK         shift and go to state 119


state 111

    (66) for -> FOR expr IN expr . DDOT expr suite
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    DDOT            shift and go to state 120
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 112

    (29) arg_list -> LPAREN expr RPAREN .

    PLUS            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    DEQUALS         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    NEQUALS         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    RABRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    LABRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    GEQUALS         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    LEQUALS         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    COLON           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    $end            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    RSBRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    LCBRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    FUNC            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    IF              reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    FOR             reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    CLASS           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    SLCOM           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    HSCOM           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    MLCOM           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    NAME            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    FLOAT           reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    CHAR            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    STRING          reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    LSBRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    RCBRACK         reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    IN              reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)
    DDOT            reduce using rule 29 (arg_list -> LPAREN expr RPAREN .)


state 113

    (30) arg_list -> LPAREN lst RPAREN .

    PLUS            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    MINUS           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    TIMES           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    DIVIDE          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    DEQUALS         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    NEQUALS         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    RABRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    LABRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    GEQUALS         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    LEQUALS         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    COLON           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    NEWLINE         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    $end            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    RSBRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    COMMA           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    RPAREN          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    LCBRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    LPAREN          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    FUNC            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    IF              reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    WHILE           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    FOR             reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    RETURN          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    CLASS           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    SLCOM           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    HSCOM           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    MLCOM           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    NAME            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    NUMBER          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    FLOAT           reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    CHAR            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    STRING          reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    LSBRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    ELSE            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    RCBRACK         reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    IN              reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)
    DDOT            reduce using rule 30 (arg_list -> LPAREN lst RPAREN .)


state 114

    (51) call -> method DOT NAME arg_list .

    PLUS            reduce using rule 51 (call -> method DOT NAME arg_list .)
    MINUS           reduce using rule 51 (call -> method DOT NAME arg_list .)
    TIMES           reduce using rule 51 (call -> method DOT NAME arg_list .)
    DIVIDE          reduce using rule 51 (call -> method DOT NAME arg_list .)
    DEQUALS         reduce using rule 51 (call -> method DOT NAME arg_list .)
    NEQUALS         reduce using rule 51 (call -> method DOT NAME arg_list .)
    RABRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    LABRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    GEQUALS         reduce using rule 51 (call -> method DOT NAME arg_list .)
    LEQUALS         reduce using rule 51 (call -> method DOT NAME arg_list .)
    COLON           reduce using rule 51 (call -> method DOT NAME arg_list .)
    NEWLINE         reduce using rule 51 (call -> method DOT NAME arg_list .)
    $end            reduce using rule 51 (call -> method DOT NAME arg_list .)
    RSBRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    COMMA           reduce using rule 51 (call -> method DOT NAME arg_list .)
    RPAREN          reduce using rule 51 (call -> method DOT NAME arg_list .)
    LCBRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    LPAREN          reduce using rule 51 (call -> method DOT NAME arg_list .)
    FUNC            reduce using rule 51 (call -> method DOT NAME arg_list .)
    IF              reduce using rule 51 (call -> method DOT NAME arg_list .)
    WHILE           reduce using rule 51 (call -> method DOT NAME arg_list .)
    FOR             reduce using rule 51 (call -> method DOT NAME arg_list .)
    RETURN          reduce using rule 51 (call -> method DOT NAME arg_list .)
    CLASS           reduce using rule 51 (call -> method DOT NAME arg_list .)
    SLCOM           reduce using rule 51 (call -> method DOT NAME arg_list .)
    HSCOM           reduce using rule 51 (call -> method DOT NAME arg_list .)
    MLCOM           reduce using rule 51 (call -> method DOT NAME arg_list .)
    NAME            reduce using rule 51 (call -> method DOT NAME arg_list .)
    NUMBER          reduce using rule 51 (call -> method DOT NAME arg_list .)
    FLOAT           reduce using rule 51 (call -> method DOT NAME arg_list .)
    CHAR            reduce using rule 51 (call -> method DOT NAME arg_list .)
    STRING          reduce using rule 51 (call -> method DOT NAME arg_list .)
    LSBRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    ELSE            reduce using rule 51 (call -> method DOT NAME arg_list .)
    RCBRACK         reduce using rule 51 (call -> method DOT NAME arg_list .)
    IN              reduce using rule 51 (call -> method DOT NAME arg_list .)
    DDOT            reduce using rule 51 (call -> method DOT NAME arg_list .)


state 115

    (53) assign -> id LSBRACK expr RSBRACK EQUALS . assign
    (54) assign -> id LSBRACK expr RSBRACK EQUALS . expr
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (57) id -> . NAME method
    (58) id -> . method
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 82
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    id                             shift and go to state 79
    expr                           shift and go to state 121
    assign                         shift and go to state 122
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    method                         shift and go to state 83

state 116

    (53) assign -> id LSBRACK expr . RSBRACK EQUALS assign
    (54) assign -> id LSBRACK expr . RSBRACK EQUALS expr
    (36) expr -> id LSBRACK expr . RSBRACK
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    RSBRACK         shift and go to state 123
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 117

    (36) expr -> id LSBRACK expr RSBRACK .

    RSBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    COMMA           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    PLUS            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    MINUS           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    TIMES           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DIVIDE          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    GEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RPAREN          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LCBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LPAREN          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    FUNC            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    IF              reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    WHILE           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    FOR             reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RETURN          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    CLASS           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    SLCOM           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    HSCOM           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    MLCOM           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NAME            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NUMBER          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    FLOAT           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    CHAR            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    STRING          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LSBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    ELSE            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    COLON           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEWLINE         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    $end            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RCBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    IN              reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DDOT            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)


state 118

    (62) else -> ELSE suite .

    ELSE            reduce using rule 62 (else -> ELSE suite .)
    COLON           reduce using rule 62 (else -> ELSE suite .)
    NEWLINE         reduce using rule 62 (else -> ELSE suite .)
    $end            reduce using rule 62 (else -> ELSE suite .)
    RCBRACK         reduce using rule 62 (else -> ELSE suite .)


state 119

    (19) suite -> LCBRACK stmts RCBRACK .

    ELSE            reduce using rule 19 (suite -> LCBRACK stmts RCBRACK .)
    COLON           reduce using rule 19 (suite -> LCBRACK stmts RCBRACK .)
    NEWLINE         reduce using rule 19 (suite -> LCBRACK stmts RCBRACK .)
    $end            reduce using rule 19 (suite -> LCBRACK stmts RCBRACK .)
    RCBRACK         reduce using rule 19 (suite -> LCBRACK stmts RCBRACK .)


state 120

    (66) for -> FOR expr IN expr DDOT . expr suite
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    LPAREN          shift and go to state 19
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 124
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 51
    method                         shift and go to state 30

state 121

    (54) assign -> id LSBRACK expr RSBRACK EQUALS expr .
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr

    COLON           reduce using rule 54 (assign -> id LSBRACK expr RSBRACK EQUALS expr .)
    NEWLINE         reduce using rule 54 (assign -> id LSBRACK expr RSBRACK EQUALS expr .)
    $end            reduce using rule 54 (assign -> id LSBRACK expr RSBRACK EQUALS expr .)
    RCBRACK         reduce using rule 54 (assign -> id LSBRACK expr RSBRACK EQUALS expr .)
    ELSE            reduce using rule 54 (assign -> id LSBRACK expr RSBRACK EQUALS expr .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46


state 122

    (53) assign -> id LSBRACK expr RSBRACK EQUALS assign .

    COLON           reduce using rule 53 (assign -> id LSBRACK expr RSBRACK EQUALS assign .)
    NEWLINE         reduce using rule 53 (assign -> id LSBRACK expr RSBRACK EQUALS assign .)
    $end            reduce using rule 53 (assign -> id LSBRACK expr RSBRACK EQUALS assign .)
    RCBRACK         reduce using rule 53 (assign -> id LSBRACK expr RSBRACK EQUALS assign .)
    ELSE            reduce using rule 53 (assign -> id LSBRACK expr RSBRACK EQUALS assign .)


state 123

    (53) assign -> id LSBRACK expr RSBRACK . EQUALS assign
    (54) assign -> id LSBRACK expr RSBRACK . EQUALS expr
    (36) expr -> id LSBRACK expr RSBRACK .

    EQUALS          shift and go to state 115
    PLUS            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    MINUS           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    TIMES           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DIVIDE          reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    DEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LABRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    GEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    LEQUALS         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    COLON           reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    NEWLINE         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    $end            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    RCBRACK         reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)
    ELSE            reduce using rule 36 (expr -> id LSBRACK expr RSBRACK .)


state 124

    (66) for -> FOR expr IN expr DDOT expr . suite
    (38) expr -> expr . PLUS expr
    (39) expr -> expr . MINUS expr
    (40) expr -> expr . TIMES expr
    (41) expr -> expr . DIVIDE expr
    (42) expr -> expr . DEQUALS expr
    (43) expr -> expr . NEQUALS expr
    (44) expr -> expr . RABRACK expr
    (45) expr -> expr . LABRACK expr
    (46) expr -> expr . GEQUALS expr
    (47) expr -> expr . LEQUALS expr
    (18) suite -> . stmt
    (19) suite -> . LCBRACK stmts RCBRACK
    (5) stmt -> . expr
    (6) stmt -> . assign
    (7) stmt -> . empty
    (8) stmt -> . function
    (9) stmt -> . if
    (10) stmt -> . while
    (11) stmt -> . for
    (12) stmt -> . return
    (13) stmt -> . class
    (14) stmt -> . comment
    (21) expr -> . call
    (22) expr -> . const
    (27) expr -> . array
    (36) expr -> . id LSBRACK expr RSBRACK
    (37) expr -> . id
    (38) expr -> . expr PLUS expr
    (39) expr -> . expr MINUS expr
    (40) expr -> . expr TIMES expr
    (41) expr -> . expr DIVIDE expr
    (42) expr -> . expr DEQUALS expr
    (43) expr -> . expr NEQUALS expr
    (44) expr -> . expr RABRACK expr
    (45) expr -> . expr LABRACK expr
    (46) expr -> . expr GEQUALS expr
    (47) expr -> . expr LEQUALS expr
    (48) expr -> . LPAREN expr RPAREN
    (53) assign -> . id LSBRACK expr RSBRACK EQUALS assign
    (54) assign -> . id LSBRACK expr RSBRACK EQUALS expr
    (55) assign -> . id EQUALS assign
    (56) assign -> . id EQUALS expr
    (20) empty -> .
    (59) function -> . FUNC id arg_list suite
    (60) if -> . IF expr suite else
    (61) if -> . IF expr suite
    (63) while -> . WHILE expr suite
    (66) for -> . FOR expr IN expr DDOT expr suite
    (64) return -> . RETURN expr
    (65) class -> . CLASS NAME suite
    (15) comment -> . SLCOM
    (16) comment -> . HSCOM
    (17) comment -> . MLCOM
    (51) call -> . method DOT NAME arg_list
    (52) call -> . NAME arg_list
    (23) const -> . NUMBER
    (24) const -> . FLOAT
    (25) const -> . CHAR
    (26) const -> . STRING
    (31) array -> . LSBRACK lst RSBRACK
    (32) array -> . LSBRACK expr RSBRACK
    (57) id -> . NAME method
    (58) id -> . method
    (49) method -> . NAME
    (50) method -> . method DOT NAME

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40
    DEQUALS         shift and go to state 41
    NEQUALS         shift and go to state 42
    RABRACK         shift and go to state 43
    LABRACK         shift and go to state 44
    GEQUALS         shift and go to state 45
    LEQUALS         shift and go to state 46
    LCBRACK         shift and go to state 93
    LPAREN          shift and go to state 19
    ELSE            reduce using rule 20 (empty -> .)
    COLON           reduce using rule 20 (empty -> .)
    NEWLINE         reduce using rule 20 (empty -> .)
    $end            reduce using rule 20 (empty -> .)
    RCBRACK         reduce using rule 20 (empty -> .)
    FUNC            shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    CLASS           shift and go to state 25
    SLCOM           shift and go to state 27
    HSCOM           shift and go to state 28
    MLCOM           shift and go to state 29
    NAME            shift and go to state 26
    NUMBER          shift and go to state 31
    FLOAT           shift and go to state 32
    CHAR            shift and go to state 33
    STRING          shift and go to state 34
    LSBRACK         shift and go to state 18

    expr                           shift and go to state 4
    suite                          shift and go to state 125
    stmt                           shift and go to state 92
    assign                         shift and go to state 5
    empty                          shift and go to state 6
    function                       shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    for                            shift and go to state 10
    return                         shift and go to state 11
    class                          shift and go to state 12
    comment                        shift and go to state 13
    call                           shift and go to state 14
    const                          shift and go to state 15
    array                          shift and go to state 16
    id                             shift and go to state 17
    method                         shift and go to state 30

state 125

    (66) for -> FOR expr IN expr DDOT expr suite .

    COLON           reduce using rule 66 (for -> FOR expr IN expr DDOT expr suite .)
    NEWLINE         reduce using rule 66 (for -> FOR expr IN expr DDOT expr suite .)
    $end            reduce using rule 66 (for -> FOR expr IN expr DDOT expr suite .)
    RCBRACK         reduce using rule 66 (for -> FOR expr IN expr DDOT expr suite .)
    ELSE            reduce using rule 66 (for -> FOR expr IN expr DDOT expr suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSBRACK in state 51 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 91 resolved as shift
